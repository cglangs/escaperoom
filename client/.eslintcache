[{"/Users/corygallagher/Documents/node_projects/escapegame/client/src/index.js":"1","/Users/corygallagher/Documents/node_projects/escapegame/client/src/App.js":"2","/Users/corygallagher/Documents/node_projects/escapegame/client/src/reportWebVitals.js":"3","/Users/corygallagher/Documents/node_projects/escapegame/client/src/IO.js":"4","/Users/corygallagher/Documents/node_projects/escapegame/client/src/Avatar.js":"5","/Users/corygallagher/Documents/node_projects/escapegame/client/src/Player.js":"6","/Users/corygallagher/Documents/node_projects/escapegame/client/src/Input.js":"7","/Users/corygallagher/Documents/node_projects/escapegame/client/src/World.js":"8","/Users/corygallagher/Documents/node_projects/escapegame/client/src/BillBoard.js":"9","/Users/corygallagher/Documents/node_projects/escapegame/client/src/Login.js":"10","/Users/corygallagher/Documents/node_projects/escapegame/client/src/Play.js":"11"},{"size":500,"mtime":1606972227891,"results":"12","hashOfConfig":"13"},{"size":330,"mtime":1607639294624,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1606972227892,"results":"15","hashOfConfig":"13"},{"size":2587,"mtime":1608314663478,"results":"16","hashOfConfig":"13"},{"size":2895,"mtime":1608304757774,"results":"17","hashOfConfig":"13"},{"size":2407,"mtime":1607454079796,"results":"18","hashOfConfig":"13"},{"size":1464,"mtime":1607440631988,"results":"19","hashOfConfig":"13"},{"size":35967,"mtime":1608314509726,"results":"20","hashOfConfig":"13"},{"size":1483,"mtime":1607456906218,"results":"21","hashOfConfig":"13"},{"size":451,"mtime":1607654507741,"results":"22","hashOfConfig":"13"},{"size":3170,"mtime":1607965073995,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"g2h62u",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"26"},"/Users/corygallagher/Documents/node_projects/escapegame/client/src/index.js",[],["54","55"],"/Users/corygallagher/Documents/node_projects/escapegame/client/src/App.js",["56"],"import React from \"react\";\nimport Play from './Play'\nimport Login from './Login'\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nconst App = () => {\n\n\treturn(\n    <Router>\n        <Switch>\n          <Route path=\"/:roomId?\" children={<Play />} />\n        </Switch>\n    </Router>\t\t\n\t)\n}\n\nexport default App","/Users/corygallagher/Documents/node_projects/escapegame/client/src/reportWebVitals.js",[],"/Users/corygallagher/Documents/node_projects/escapegame/client/src/IO.js",["57","58"],"import World from './World'\nimport Avatar from './Avatar'\nimport Player from './Player'\nimport Input from './Input'\nimport io from \"socket.io-client\"\nimport { useHistory } from \"react-router-dom\";\n\n\n\nexport default class IO {\n    \n    static init() {\n            IO.currentRoomId = null\n            console.log(process.env.NODE_ENV)\n            //if(process.env.NODE_ENV === 'development'){\n                //IO.socket = io(\"http://localhost:3001/\", {reconnectionDelayMax: 10000})                \n            //} else{\n                IO.socket=io()                \n            //}\n\n            IO.socket.on(\"auth\", function(data){\n                if(data.success){\n                   IO.currentRoomId = data.roomId\n                   World.init()\n                   Player.init()\n                   Avatar.init(data.username);\n                   Input.init();\n                    //Avatar.send();\n                }\n\n                else {\n                    console.log(\"THAT ROOM DOESN'T EXIST\")\n\n                }\n            })\n\n            IO.socket.on(\"transform\", function(data){\n                switch(data.command) {\n                case \"playerGone\":\n                    Player.remove(data);\n                    break;\n                case \"playerMoved\":\n                    Player.move(data);\n                    break;\n                }\n            })\n\n\n\n            IO.socket.on(\"room modified\", function(data){\n                World.roomModification(data.actionCode)\n            })\n\n            /*IO.socket.on(\"all users\", users => {\n                const peers = [];\n                users.forEach(userID => {\n                    const peer = createPeer(userID, socketRef.current.id, stream);\n                    peersRef.current.push({\n                        peerID: userID,\n                        peer,\n                    })\n                    peers.push(peer);\n                })\n                setPeers(peers);\n            })*/\n\n\n\n        }\n\n     static login (username, roomId) {\n           IO.socket.emit('login', {username: username, roomId: roomId})\n     }\n\n}\n\n        /*Socket.ws.onmessage = (msg) => {\n            switch(msg.data) {\n                case \"playerGone\":\n                    Player.remove(json.data);\n                    break;\n                case \"playerMoved\":\n                    Player.move(json.data);\n                    break;\n            }\n        };*/\n\n        /*Socket.ws.onclose = () => {\n            alert(\"Connection closed\");\n        };\n        Socket.ws.onerror = (e) => {\n            console.log(\"Error\");\n        };\n    }*/\n\n\n","/Users/corygallagher/Documents/node_projects/escapegame/client/src/Avatar.js",["59","60","61","62","63","64"],"import BillBoard from './BillBoard'\nimport IO from './IO'\nimport { Vector3, StandardMaterial, MeshBuilder, Axis, Space, Color3} from '@babylonjs/core';\nimport Input from './Input'\nimport World from './World'\n\n\n\n\nexport default class Avatar {\n    \n    static init(username) {\n        Avatar.mesh = MeshBuilder.CreateBox(\"avatar\", {height: Avatar.height, width: 1, depth: 1}, World.scene);\n        Avatar.mesh.position = Vector3.Zero();\n        Avatar.mesh.position.y = Avatar.height/2;\n        Avatar.mesh.isVisible = false\n        //Avatar.mesh.material = new StandardMaterial(\"matAvatar\", World.scene);\n        //Avatar.mesh.material.diffuseColor = new Color3.Green();\n        Avatar.username = username;\n        //new BillBoard(Avatar.mesh, Avatar.username);\n    }   \n    \n    /*static rotate(isLeft) {\n        //Turning left\n        if (isLeft) {\n            Avatar.absoluteRotation -= Avatar.rotationSpeed;\n            Avatar.mesh.rotate(Axis.Y, Avatar.rotationSpeed, Space.WORLD);\n        //Turning right\n        } else {\n            Avatar.absoluteRotation += Avatar.rotationSpeed;            \n            Avatar.mesh.rotate(Axis.Y, -Avatar.rotationSpeed, Space.WORLD);\n        }\n    }*/\n    \n    static send() {\n        var x = Avatar.mesh.position.x;\n        var y = Avatar.mesh.position.y;\n        var z = Avatar.mesh.position.z;\n        var rotation = Avatar.absoluteRotation;\n        IO.socket.emit('transform', {command: \"playerMoved\",  x, y, z, rotation})\n    }   \n    \n    static update(position, cameraRotation) {\n        if (Avatar.mesh !== null) {\n            //console.log(position)\n            Avatar.mesh.position = position\n            Avatar.absoluteRotation += cameraRotation.y\n            //console.log(rotation)\n            //console.log(cameraRotation)\n            //console.log(cameraDirection)\n            Avatar.send();\n\n\n            //Moving forward\n            /*if (Input.key.up) {\n        \t\tconst forward = new Vector3(Avatar.walkSpeed * Math.cos(Avatar.absoluteRotation), 0, Avatar.walkSpeed * Math.sin(Avatar.absoluteRotation));\n                Avatar.mesh.moveWithCollisions(forward);\n\n                Avatar.send();\n\n            } else if(Input.key.down){\n                const backward = new Vector3(Avatar.walkSpeed * ( -1 * Math.cos(Avatar.absoluteRotation)), 0, Avatar.walkSpeed * ( -1 * Math.sin(Avatar.absoluteRotation)));\n\n                Avatar.mesh.moveWithCollisions(backward);\n                Avatar.send();\n            }\n            //Turning left\n            if (Input.key.left) {\n                Avatar.rotate(false);\n                Avatar.send();\n            //Turning right\n            } else if (Input.key.right) {\n                Avatar.rotate(true);\n                Avatar.send();\n            }*/\n        }\n    }\n}\n\nAvatar.absoluteRotation = 0;\nAvatar.height = 3;\nAvatar.mesh = null;\nAvatar.rotationSpeed = 0.01;\nAvatar.walkSpeed = 0.007;","/Users/corygallagher/Documents/node_projects/escapegame/client/src/Player.js",["65"],"import World from './World'\nimport {MeshBuilder, Vector3, StandardMaterial, Color3, Quaternion} from '@babylonjs/core';\nimport BillBoard from './BillBoard'\n\n\nexport default class Player {\n    \n    constructor(id, username) {\n        var height = 3;\n        this.id = id;\n        this.mesh = MeshBuilder.CreateBox(\"avatar\", {height: height, width: 1, depth: 1}, World.scene);\n        this.mesh.position = Vector3.Zero();\n        this.mesh.position.x = 0;\n        this.mesh.position.y = height/2;\n        this.mesh.position.z = 0;\n        this.mesh.material = Player.material;\n        this.billboard = new BillBoard(this.mesh, username);\n        Player.all.push(this);\n    }\n    \n    //Destroy player meshes\n    destroy() {\n        this.billboard.mesh.dispose();\n        this.mesh.dispose();\n    }\n    \n    //Find existing player or create if not exists\n    static find(playerID, username) {       \n        //Check if player is in our list\n        for (var objPlayer of Player.all) {\n            if (objPlayer.id === playerID) {\n                //Found player, so lets return it\n                return(objPlayer);\n            }\n        };                \n        //Player doesn't exist, so lets create a new one\n        console.log(playerID, username)\n        return(new Player(playerID, username));\n    }\n    \n    static init() {\n        Player.material = new StandardMaterial(\"matPlayer\", World.scene);\n        Player.material.diffuseColor = new Color3.Red();        \n    }\n    \n    //Find player and move them\n    static move(data) {\n   \n        var playerID = parseInt(data.id);\n        var objPlayer = Player.find(playerID, data.username);\n        objPlayer.transform(data.x, data.y, data.z, data.rotation);\n    }\n    \n    //Remove player from world\n    static remove(data) {\n        for (var objPlayer of Player.all) {\n            if (objPlayer.id === data.id) {\n                objPlayer.destroy();\n                break;\n            }\n        }\n        \n        //Remove me from list of all players\n        Player.all = Player.all.filter((obj) => {\n            return obj.id !== data.id;\n        });\n    }\n    \n    //Change position and rotation\n    transform(x, y, z, rotation) {\n        this.mesh.position.x = x;\n        this.mesh.position.y = y;\n        this.mesh.position.z = z;\n        this.mesh.rotationQuaternion = Quaternion.FromEulerAngles(0, -rotation, 0);\n    }\n}\n\nPlayer.all = new Array();","/Users/corygallagher/Documents/node_projects/escapegame/client/src/Input.js",["66","67"],"export default class Input {\n    \n    static init() {\n        window.addEventListener(\"keydown\", this.keydownEvent);\n        window.addEventListener(\"keyup\", this.keyupEvent);\n        window.addEventListener(\"blur\", this.keyupEvent);\n    }\n\n    static keydownEvent(e) {\n        switch (e.keyCode) {\n            case 38: //UP\n            case 87: //W\n                 e.preventDefault()\n                Input.key.up = true;\n                break;\n            case 37: //LEFT\n            case 65: //A\n                Input.key.left = true;\n                break;\n            case 39: //RIGHT\n            case 68: //D\n                Input.key.right = true;\n                break;\n            case 40: //DOWN\n            case 83: //S\n                Input.key.down = true;\n                break;\n        }\n    }\n    \n    static keyupEvent(e) {\n        switch (e.keyCode) {\n            case 38: //UP\n            case 87: //W\n                e.preventDefault()\n                Input.key.up = false;\n                break;\n            case 37: //LEFT\n            case 65: //A\n                Input.key.left = false;\n                break;\n            case 39: //RIGHT\n            case 68: //D\n                Input.key.right = false;\n                break;\n            case 40: //DOWN\n            case 83: //S\n                Input.key.down = false;\n                break;\n        }\n    }\n}\n\nInput.key = {\n    down:false,\n    up:false,\n    left:false,\n    right:false\n};","/Users/corygallagher/Documents/node_projects/escapegame/client/src/World.js",["68","69","70","71","72","73","74","75","76","77","78","79","80"],"import Avatar from './Avatar'\n//import Chat from './Chat'\nimport '@babylonjs/loaders';\nimport 'babylonjs-loaders';\n//import BoomBox from './BoomBox'\nimport * as GUI from '@babylonjs/gui'\nimport IO from './IO'\nimport {DefaultLoadingScreen, DynamicTexture, Vector4,ExecuteCodeAction,SetValueAction,InterpolateValueAction,SceneLoader, FreeCamera,ArcRotateCamera, ActionManager, UniversalCamera,Color3, Vector3, StandardMaterial,HemisphericLight,DirectionalLight,PointLight, Texture, MeshBuilder, Engine, Scene, Mesh, Tools} from '@babylonjs/core';\n\n\nDefaultLoadingScreen.prototype.displayLoadingUI = function () {\n    if (document.getElementById(\"customLoadingScreenDiv\")) {\n        // Do not add a loading screen if there is already one\n        document.getElementById(\"customLoadingScreenDiv\").style.display = \"initial\";\n        return;\n    }\n    this._loadingDiv = document.createElement(\"div\");\n    this._loadingDiv.id = \"customLoadingScreenDiv\";\n    this._loadingDiv.innerHTML = \"Preparing room...\";\n    var customLoadingScreenCss = document.createElement('style');\n    customLoadingScreenCss.type = 'text/css';\n    customLoadingScreenCss.innerHTML = `\n    #customLoadingScreenDiv{\n        background-color: lightBlue;\n        color: white;\n        font-size:50px;\n        text-align:center;\n        padding-top: 20%;\n    }\n    `;\n    document.getElementsByTagName('head')[0].appendChild(customLoadingScreenCss);\n    this._resizeLoadingUI();\n    window.addEventListener(\"resize\", this._resizeLoadingUI);\n    document.body.appendChild(this._loadingDiv);\n};\n\nexport default class World {\n    static init() {\n        World.canvas = document.getElementById(\"canvas\");\n        var engine = new Engine(World.canvas, true);\n        //World.is_loaded = false\n        World.booksClicked = 0;\n\n        \n        World.scene = new Scene(engine);\n        World.scene.gravity = new Vector3(0, -0.9, 0);\n        World.scene.collisionsEnabled = true;\n\n\n\n        World.setupCamera();        \n        World.setupLights();\n        World.setupGround();\n        World.setupWalls();\n        //Chat.init()\n\n        engine.runRenderLoop(() => {\n            //console.log(World.is_loaded)\n            //if(World.is_loaded){\n                World.scene.render();\n                Avatar.update(World.camera.position, World.camera.cameraRotation);\n            //}\n\n            //World.updateCamera();\n        });    \n\n        engine.displayLoadingUI();\n    \n        World.scene.executeWhenReady(function() {\n            //engine.hideLoadingUI();\n            var myobj = document.getElementById(\"customLoadingScreenDiv\");\n            myobj.remove();\n        }) \n        \n        //Resize event\n        window.addEventListener(\"resize\", () => {\n            engine.resize();\n        });\n\n\n        /*var loadingScreen = new CustomLoadingScreen(\"I'm loading!!\");\n        // replace the default loading screen\n        engine.loadingScreen = loadingScreen;\n        // show the loading screen\n        engine.displayLoadingUI();*/\n\n    }\n\n    static roomModification(actionCode){\n        switch (actionCode) {\n          case 1:\n            World.scene.getMeshByName(\"safeFront\").dispose()\n            World.scene.getMeshByName(\"safeFrontBorder\").dispose()\n            break;\n\n        }\n\n\n    }\n    \n    static setupCamera() {\n        /*World.camera = new FreeCamera(\"firstPersonCam\", Vector3.Zero(), World.scene);\n        World.camera.ellipsoid = new Vector3(0.1, 0.1, 0.1);\n        World.camera.checkCollisions = true;\n        World.camera.speed = 0.1\n        World.camera.applyGravity = true;\n\n        //World.camera.position.x -= Math.sin(-Math.PI/2) * -1 * World.cameraDistance;\n        World.camera.position.y = 0.7;\n        World.camera.attachControl(World.canvas, true)\n        //World.camera.position.z -= Math.cos(-Math.PI/2) * -1 * World.cameraDistance;\n        //var lookAt = Vector3.Zero();\n        //lookAt.y = Avatar.height + Avatar.height/2;\n        //World.camera.setTarget(lookAt);*/\n        World.camera = new FreeCamera(\"FreeCamera\", new Vector3(-5,2,-5), World.scene);\n        //World.camera = new FreeCamera(\"FreeCamera\", new Vector3(15,2,20), World.scene);\n        World.camera.attachControl(World.canvas, true);\n        //World.scene.activeCameras.push(World.camera);\n        World.scene.activeCamera = World.camera\n        World.camera.checkCollisions = true;\n        World.camera.applyGravity = true;\n        World.camera.ellipsoid = new Vector3(1.1, 1, 1.1);\n        World.camera.speed = 0.1\n        World.camera.keysUp.push(87);\n        World.camera.keysDown.push(83)\n        World.camera.keysRight.push(68)\n        World.camera.keysLeft.push(65)\n\n        World.arcCamera = new ArcRotateCamera(\"ArcCamera\", 3 * Math.PI / 2, 3 * Math.PI / 8, 3, new Vector3(0, 0, 0), World.scene);\n        World.arcCamera.layerMask = 0x10000000;\n    }\n    \n    static setupGround() {\n        /*var ground = MeshBuilder.CreateGround(\"ground\", {height: 3, width: 3, subdivisions: 4}, World.scene);\n        ground.checkCollisions = true;\n        ground.position = Vector3.Zero();\n        ground.material = new StandardMaterial(\"matGround\", World.scene);\n        ground.material.diffuseTexture = new Texture(\"ground.jpg\", World.scene);*/\n        var ground = Mesh.CreatePlane(\"ground\", 20.0, World.scene);\n        ground.material = new StandardMaterial(\"groundMat\", World.scene);\n        ground.material.diffuseTexture = new Texture(\"wood_floor_texture.jpg\", World.scene);\n        ground.position = new Vector3(0,0,0);\n        ground.rotation = new Vector3(Math.PI / 2, 0, 0);\n        ground.checkCollisions = true;\n\n        var hallway = MeshBuilder.CreatePlane(\"hallway\", {width: 4, height: 10, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        hallway.position = new Vector3(5,0,15)\n        //hallway.material = new StandardMaterial(\"\", World.scene);\n        //hallway.material.diffuseTexture = new Texture(\"wood_floor_texture.jpg\", World.scene);\n        hallway.rotation = new Vector3(Math.PI / 2, 0, 0);\n        hallway.checkCollisions = true;\n\n\n        var turn = MeshBuilder.CreatePlane(\"turn\", {width: 8, height: 4, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        turn.position = new Vector3(7,0,20)\n        //hallway.material = new StandardMaterial(\"\", World.scene);\n        //hallway.material.diffuseTexture = new Texture(\"wood_floor_texture.jpg\", World.scene);\n        turn.rotation = new Vector3(Math.PI / 2, 0, 0);\n        turn.checkCollisions = true;\n\n\n        var secretRoom = MeshBuilder.CreatePlane(\"secretRoom\", {width: 8, height: 10, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        secretRoom.position = new Vector3(15,0,20)\n        //hallway.material = new StandardMaterial(\"\", World.scene);\n        //hallway.material.diffuseTexture = new Texture(\"wood_floor_texture.jpg\", World.scene);\n        secretRoom.rotation = new Vector3(Math.PI / 2, 0, 0);\n        secretRoom.checkCollisions = true;\n\n\n    }\n\n\n    static openDrawer(drawerNumber){\n        var boxSize = 1;\n        var myPath = [\n                 new Vector3(0, 0.0, 0),\n                new Vector3(0, boxSize/2, 0)\n        ];\n        var currentDrawer = MeshBuilder.CreateTube(\"currentDrawer\", {path: myPath, tessellation:4, cap: 1, radius: boxSize, sideOrientation: Mesh.DOUBLESIDE, updatable: true}, World.scene);\n        currentDrawer.material = new StandardMaterial(\"\", World.scene);\n        currentDrawer.material.diffuseTexture = new Texture(\"desk_texture.png\", World.scene);\n        currentDrawer.layerMask = 0x10000000;\n        let boxColor, drawerText\n        switch (drawerNumber) {\n          case 1:\n            boxColor =  new Color3.Blue() \n            drawerText = \"I\"\n            break;\n          case 2:\n            boxColor =  new Color3(0, 206/255, 209/255)\n            drawerText = \"II\"\n            break;\n          case 3:\n            boxColor = new Color3.Green()\n            drawerText = \"III\"\n            break;\n          case 4:\n            boxColor = new Color3.Red()\n            drawerText = \"IV\"\n            break;\n\n        }\n\n        var box = MeshBuilder.CreateBox(\"clue\", {width: 0.1, height: 0.1, depth: 0.1, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        box.position.y = 0.051;\n        box.material = new StandardMaterial(\"\", World.scene);\n        box.material.diffuseColor = boxColor;\n        box.parent =  currentDrawer\n        box.layerMask = 0x10000000;\n\n\n        var drawerLabel = MeshBuilder.CreatePlane(\"drawerLabel\", {width: 1, height: 1, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        drawerLabel.position.y = -0.001;\n        drawerLabel.material = new StandardMaterial(\"\", World.scene);\n        drawerLabel.material.diffuseTexture = new DynamicTexture(\"dynamic texture\", {width:512, height:256}, World.scene); \n        drawerLabel.material.diffuseTexture.drawText(drawerText, 100, 100, \"bold 70px Segoe UI\", \"black\", \"transparent\", true, true);\n        drawerLabel.material.diffuseTexture.hasAlpha = true;\n        drawerLabel.rotation = new Vector3(Tools.ToRadians(90),0,0);\n        drawerLabel.parent =  currentDrawer\n        drawerLabel.layerMask = 0x10000000;\n\n\n\n\n\n\n        World.scene.activeCamera = World.arcCamera\n        World.arcCamera.attachControl(World.canvas, true);\n        var light = new HemisphericLight(\"light1\", new Vector3(1, 1, 0.5), World.scene);\n\n\n\n\n        var advancedTexture = GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n        advancedTexture.layer.layerMask = 0x10000000;\n\n        var button = GUI.Button.CreateImageButton(\"but\", \"Return\", \"\");\n        button.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\n        button.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\n        button.width = 0.1;\n        button.height = \"40px\";\n        button.color = \"white\";\n        button.background = \"green\";\n        button.onPointerUpObservable.add(function() {\n            World.closeDrawer(currentDrawer,light)\n        });\n        advancedTexture.addControl(button);\n\n\n    }\n\n    static closeDrawer(currentDrawer,light){\n        currentDrawer.dispose();\n        World.scene.activeCamera = World.camera\n        light.dispose()\n    }\n\n\n    static openNumPad(mesh1,mesh2){\n        var advancedTexture = GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n\n        var input = new GUI.InputText();\n        input.width = 0.05;\n        input.maxWidth = 0.05;\n        input.height = \"40px\";\n        input.color = \"white\";\n        input.background = \"black\";\n        advancedTexture.addControl(input);\n\n\n        var button = GUI.Button.CreateImageButton(\"SubmitButton\", \"Submit\", \"\");\n        button.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\n        button.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n        button.width = 0.1;\n        button.height = \"40px\";\n        button.color = \"white\";\n        button.background = \"black\";\n        /*button.onPointerUpObservable.add(function() {\n            mesh1.dispose()\n            mesh2.dispose()\n            input.dispose()\n            button.dispose()\n        });*/\n        advancedTexture.addControl(button);\n\n        var keyboard = new GUI.VirtualKeyboard();\n        keyboard.addKeysRow([\n          \"1\",\n          \"2\",\n          \"3\",\n          \"4\",\n          \"5\",\n          \"6\",\n          \"7\",\n          \"8\",\n          \"9\",\n          \"0\",\n          \"\\u2190\"\n        ]);\n        keyboard.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n        advancedTexture.addControl(keyboard);\n        keyboard.connect(input);\n        advancedTexture.moveFocusToControl(input)\n\n        input.onBlurObservable.add(function() {\n            if (1===1) {\n                mesh1.dispose()\n                mesh2.dispose()\n                input.dispose()\n                button.dispose()\n                IO.socket.emit('room modified', {actionCode: 1})\n           }\n        });\n\n    }\n\n \n\n\n    static setupWalls(){\n        var wall1Left = MeshBuilder.CreateBox(\"wall1Left\", {width: 13, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall1Left.checkCollisions = true;\n        wall1Left.material = new StandardMaterial(\"\"); \n        wall1Left.position = new Vector3(-3.5,1,11);\n        wall1Left.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n        var wall1HiddenDoor = MeshBuilder.CreateBox(\"wall1HiddenDoor\", {width: 4, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall1HiddenDoor.checkCollisions = true;\n        wall1HiddenDoor.material = new StandardMaterial(\"\"); \n        wall1HiddenDoor.position = new Vector3(5,1,11);\n        wall1HiddenDoor.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n        var wall1Right = MeshBuilder.CreateBox(\"wall1Right\", {width: 3, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall1Right.checkCollisions = true;\n        wall1Right.material = new StandardMaterial(\"\"); \n        wall1Right.position = new Vector3(8.5,1,11);\n        wall1Right.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n        /*var wall2 = MeshBuilder.CreateBox(\"wall2\", {width: 20, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall2.checkCollisions = true;\n        wall2.position = new Vector3(11,1,0);\n        wall2.material = new StandardMaterial(\"\");\n        wall2.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall2.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);*/\n\n        var wall2Left = MeshBuilder.CreateBox(\"wall2Left\", {width: 8, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall2Left.checkCollisions = true;\n        wall2Left.position = new Vector3(11,1,-6);\n        wall2Left.material = new StandardMaterial(\"\");\n        wall2Left.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall2Left.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n        var wall2Right = MeshBuilder.CreateBox(\"wall2Right\", {width: 8, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall2Right.checkCollisions = true;\n        wall2Right.position = new Vector3(11,1,6);\n        wall2Right.material = new StandardMaterial(\"\");\n        wall2Right.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall2Right.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n        var wall2Arch = MeshBuilder.CreateBox(\"wall2Arch\", {width: 4, height: 4, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall2Arch.checkCollisions = true;\n        wall2Arch.position = new Vector3(11,4,0);\n        wall2Arch.material = new StandardMaterial(\"\");\n        wall2Arch.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall2Arch.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n        var wall2Base = MeshBuilder.CreateBox(\"wall2Base\", {width: 4, height: 2, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall2Base.checkCollisions = true;\n        wall2Base.position = new Vector3(11,-1,0);\n        wall2Base.material = new StandardMaterial(\"\");\n        wall2Base.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall2Base.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n\n        var safeBack = MeshBuilder.CreatePlane(\"safeBack\", {height:5, width: 4}, World.scene)\n        safeBack.position = new Vector3(12, 1, 0)\n        safeBack.material = new StandardMaterial(\"\", World.scene);\n        safeBack.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        safeBack.checkCollisions = true\n\n        var safeBackBorder = MeshBuilder.CreatePlane(\"safeBackBorder\", {height:5, width: 4}, World.scene)\n        safeBackBorder.position = new Vector3(11.5, 1, 0)\n        safeBackBorder.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        safeBackBorder.checkCollisions = true\n        safeBackBorder.isVisible = false; \n\n\n        var safeFront = MeshBuilder.CreatePlane(\"safeFront\", {height:2, width: 4}, World.scene)\n        safeFront.position = new Vector3(10, 1, 0)\n        safeFront.material = new StandardMaterial(\"\", World.scene);\n        safeFront.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        safeFront.material.diffuseTexture = new Texture(\"safe_texture.png\", World.scene);\n        safeBack.checkCollisions = true\n\n        safeFront.actionManager = new ActionManager(World.scene);\n        safeFront.actionManager.registerAction(\n            new ExecuteCodeAction(\n                {\n                    trigger: ActionManager.OnPickTrigger\n                    //parameter: 'r'\n                },\n                function () { World.openNumPad(safeFront, safeFrontBorder)}\n            )\n        );\n\n\n\n        var safeFrontBorder = MeshBuilder.CreatePlane(\"safeFrontBorder\", {height:2, width: 4}, World.scene)\n        safeFrontBorder.position = new Vector3(9.5, 1, 0);\n        safeFrontBorder.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        safeFrontBorder.checkCollisions = true;\n        safeFrontBorder.isVisible = false; \n\n\n\n\n\n        var wall3 = MeshBuilder.CreateBox(\"wall3\", {width: 20, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall3.checkCollisions = true;\n        wall3.material = new StandardMaterial(\"\"); \n        wall3.position = new Vector3(0,1,-11);\n        wall3.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n\n        var wall4Left = MeshBuilder.CreateBox(\"wall4Left\", {width: 8, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall4Left.checkCollisions = true;\n        wall4Left.position = new Vector3(-11,1,-6);\n        wall4Left.material = new StandardMaterial(\"\");\n        wall4Left.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall4Left.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n        var wall4Right = MeshBuilder.CreateBox(\"wall4Right\", {width: 8, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall4Right.checkCollisions = true;\n        wall4Right.position = new Vector3(-11,1,6);\n        wall4Right.material = new StandardMaterial(\"\");\n        wall4Right.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall4Right.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n        var wall4Arch = MeshBuilder.CreateBox(\"wall4Arch\", {width: 4, height: 2, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall4Arch.checkCollisions = true;\n        wall4Arch.position = new Vector3(-11,5,0);\n        wall4Arch.material = new StandardMaterial(\"\");\n        wall4Arch.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall4Arch.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n        var wall4Door = MeshBuilder.CreateBox(\"wall4Door\", {width: 4, height: 4, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall4Door.checkCollisions = true;\n        wall4Door.position = new Vector3(-11,2,0);\n        wall4Door.material = new StandardMaterial(\"\");\n        wall4Door.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall4Door.material.diffuseTexture = new Texture(\"double_door_texture.jpg\", World.scene);\n\n\n        var hallwayLeft = MeshBuilder.CreateBox(\"hallwayLeft\", {width: 12, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        hallwayLeft.checkCollisions = true;\n        hallwayLeft.position = new Vector3(2,0,18)\n        hallwayLeft.material = new StandardMaterial(\"\");\n        hallwayLeft.rotation = new Vector3(0,Tools.ToRadians(90),0);\n\n\n        var hallwayTurnLeft = MeshBuilder.CreateBox(\"hallwayTurnLeft\", {width: 8, height: 10, depth: 4, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        hallwayTurnLeft.checkCollisions = true;\n        hallwayTurnLeft.position =  new Vector3(7,0,24)\n        hallwayTurnLeft.material = new StandardMaterial(\"\");\n\n        var secretRoomWall1 = MeshBuilder.CreateBox(\"secretRoomWall1\", {width: 8, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        secretRoomWall1.checkCollisions = true;\n        secretRoomWall1.position = new Vector3(15,0,25)\n        secretRoomWall1.material = new StandardMaterial(\"\");\n\n        var secretRoomWall2 = MeshBuilder.CreateBox(\"secretRoomWall2\", {width: 10, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        secretRoomWall2.checkCollisions = true;\n        secretRoomWall2.position = new Vector3(20,0,20)\n        secretRoomWall2.material = new StandardMaterial(\"\");\n        secretRoomWall2.rotation = new Vector3(0,Tools.ToRadians(90),0);\n\n        var secretRoomWall3 = MeshBuilder.CreateBox(\"secretRoomWall3\", {width: 8, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        secretRoomWall3.checkCollisions = true;\n        secretRoomWall3.position = new Vector3(15,0,15)\n        secretRoomWall3.material = new StandardMaterial(\"\");\n\n        var secretRoomWall4 = MeshBuilder.CreateBox(\"secretRoomWall4\", {width: 7, height: 10, depth: 4, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        secretRoomWall4.checkCollisions = true;\n        secretRoomWall4.position = new Vector3(9,0,15.5)\n        secretRoomWall4.material = new StandardMaterial(\"\");\n        secretRoomWall4.rotation = new Vector3(0,Tools.ToRadians(90),0);\n\n\n\n        /*var secretRoom = MeshBuilder.CreatePlane(\"secretRoom\", {width: 8, height: 10, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        secretRoom.position = new Vector3(15,0,20)\n        //hallway.material = new StandardMaterial(\"\", World.scene);\n        //hallway.material.diffuseTexture = new Texture(\"wood_floor_texture.jpg\", World.scene);\n        secretRoom.rotation = new Vector3(Math.PI / 2, 0, 0);\n        secretRoom.checkCollisions = true;*/\n\n        var roof = MeshBuilder.CreateBox(\"roof\", {width: 20, height: 2, depth: 20, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        roof.position = new Vector3(0,7,0);\n        roof.material = new StandardMaterial(\"\");\n        roof.material.diffuseTexture = new Texture(\"wall_texture.jpg\", World.scene);\n\n        SceneLoader.ImportMesh(\"\",\"\",\"plant_with_color.babylon\", World.scene, function(newMeshes){\n            newMeshes.forEach((mesh) => {\n            mesh.position = mesh.position.add(new Vector3(-3,0,-3))\n            mesh.scaling = new Vector3(0.4, 0.4, 0.4);\n            //mesh.checkCollisions = true;\n            //console.log(mesh)\n            //mesh.showBoundingBox = true\n            })\n            //console.log(newMeshes[1].getBoundingInfo().boundingBox.extendSize.scale(2))\n            var box = MeshBuilder.CreateBox(\"myBox\", {height: 13, width: 3, depth: 3}, World.scene);\n            box.isVisible = false;    \n            box.parent =  newMeshes[1];\n            box.checkCollisions = true;\n\n\n\n    \n            //do nothing\n        })\n\n         SceneLoader.ImportMesh(\"\",\"\",\"bookshelfFrida.babylon\", World.scene, function(newMeshes){\n            console.log(newMeshes)\n            newMeshes.forEach((mesh) => {\n            mesh.parent = wall1Left\n\n            mesh.scaling = new Vector3(0.45, 0.45, 0.45);\n            mesh.rotation = new Vector3(Tools.ToRadians(-90),Tools.ToRadians(180),0);\n            mesh.position = mesh.position.add(new Vector3(8,1,-2))\n            //mesh.checkCollisions = true;\n            //console.log(mesh)\n            //mesh.showBoundingBox = true\n            })\n            //console.log(newMeshes[0].getBoundingInfo().boundingBox.extendSize.scale(2))\n            var box = MeshBuilder.CreateBox(\"fridaBox\", {height: 10, width: 6, depth: 5}, World.scene);\n            box.position = box.position.add(new Vector3(3,0,-2))\n            box.rotation = new Vector3(Tools.ToRadians(-90),0,0);\n\n            box.isVisible = false;   \n            box.parent =  newMeshes[0];\n            box.checkCollisions = true;\n            World.setUpBooks(newMeshes[0], wall1HiddenDoor)\n\n\n\n    \n            //do nothing\n        })\n\n        SceneLoader.ImportMesh(\"\",\"\",\"chair.glb\", World.scene, function(newMeshes){\n            newMeshes.forEach((mesh) => {\n            //mesh.scaling = new Vector3(10, 10, 10);\n            mesh.scaling = new Vector3(1.5, 1.5, 1.5);\n\n            mesh.position = new Vector3(6,0,-5)\n            //mesh.checkCollisions = true;\n            //mesh.showBoundingBox = true\n\n            })\n            //newMeshes[1].checkCollisions = true;\n            //console.log(newMeshes[1].getBoundingInfo().boundingBox.extendSize.scale(2))\n            var box = MeshBuilder.CreateBox(\"chairBox\", {height: 2, width: 0.55, depth: 0.7}, World.scene);\n            box.isVisible = false;    \n            //box.setPositionWithLocalVector(new Vector3(0, 1, 0))\n            box.parent =  newMeshes[1];\n            box.checkCollisions = true;\n            //do nothing\n        })\n\n        SceneLoader.ImportMesh(\"\",\"\",\"desk.glb\", World.scene, function(newMeshes){\n            newMeshes.forEach((mesh) => {\n            //mesh.scaling = new Vector3(10, 10, 10);\n            mesh.scaling = new Vector3(1.5, 1.5, 1.5);\n\n            mesh.position = new Vector3(10,0,-10)\n\n            //mesh.checkCollisions = true;\n            //console.log(newMeshes[1].getBoundingInfo().boundingBox.extendSize.scale(2))\n            //mesh.showBoundingBox = true\n            //console.log(mesh)\n            })\n\n            var box = MeshBuilder.CreateBox(\"deskBox\", {height: 2, width: 1.5, depth: 1}, World.scene);\n            box.isVisible = false;    \n            //box.setPositionWithLocalVector(new Vector3(0, 1, 0))\n            box.parent =  newMeshes[1];\n            box.checkCollisions = true;\n            World.setUpDrawers(newMeshes[1])\n\n         })\n\n        SceneLoader.ImportMesh(\"\",\"\",\"clock.glb\", World.scene, function(newMeshes){\n            newMeshes.forEach((mesh) => {\n            mesh.parent = wall1Left\n            mesh.position = mesh.position.add(new Vector3(-2,2,-1))\n            mesh.rotation = new Vector3(Tools.ToRadians(-90),0,0);\n            mesh.scaling = new Vector3(3.5, 3.5, 3.5)\n            })\n\n         })\n\n\n\n\n\n\n      /*drawer1.actionManager.registerAction(\n            new InterpolateValueAction(\n                ActionManager.OnPickTrigger,\n                wall4Door,\n                'visibility',\n                0\n            )).then(\n            new InterpolateValueAction(\n                ActionManager.OnPickTrigger,\n                wall4Door,\n                'visibility',\n                1.0\n            )\n       )*/\n\n\n\n\n        /*var box = Mesh.CreateBox(\"crate\", 2, World.scene);\n        box.material = new StandardMaterial(\"Mat\", World.scene);\n        box.position = new Vector3(0,1,5);\n        box.checkCollisions = true;\n        box.actionManager = new ActionManager(World.scene);\n        box.actionManager.registerAction(\n            new InterpolateValueAction(\n                ActionManager.OnPickTrigger,\n                wall4Door,\n                'visibility',\n                0\n            )).then(\n            new InterpolateValueAction(\n                ActionManager.OnPickTrigger,\n                wall4Door,\n                'visibility',\n                1.0\n            )\n       )*/\n\n    }\n\n    static clickBook(bookNumber,wall1HiddenDoor){\n        if(bookNumber === 1){\n            World.booksClicked = 1\n        }\n        else if(bookNumber === World.booksClicked + 1){\n            World.booksClicked += 1\n            //make sound effect\n        }\n        if(World.booksClicked === 4){\n            wall1HiddenDoor.dispose()\n            //open wall\n        }\n\n    }\n\n    static setUpBooks(bookShelfMesh,wall1HiddenDoor){\n\n        var mat = new StandardMaterial(\"invisible\", World.scene);\n        mat.alpha = 0;\n\n        var book1 = MeshBuilder.CreatePlane(\"book1\", {height:0.9, width: 0.14, sideOrientation: Mesh.DOUBLESIDE}, World.scene)\n        book1.parent = bookShelfMesh\n        //book1.position = new Vector3(0.355,0.595,0.30)\n        book1.position = book1.position.add(new Vector3(3.2,-1.2,-5.2))\n        book1.rotation = new Vector3(Tools.ToRadians(90),0,0);\n        book1.material = new StandardMaterial(\"\", World.scene);\n        book1.material.diffuseColor = new Color3.Green();\n        book1.material = mat;\n\n        book1.actionManager = new ActionManager(World.scene);\n        book1.actionManager.registerAction(\n            new ExecuteCodeAction(\n                {\n                    trigger: ActionManager.OnPickTrigger\n                    //parameter: 'r'\n                },\n                function () {World.clickBook(3,wall1HiddenDoor) }\n            )\n        );\n\n        var book2 = MeshBuilder.CreatePlane(\"book2\", {height:0.9, width: 0.14, sideOrientation: Mesh.DOUBLESIDE}, World.scene)\n        book2.parent = bookShelfMesh\n        //book1.position = new Vector3(0.355,0.595,0.30)\n        book2.position = book2.position.add(new Vector3(3.04,-1.2,-5.2))\n        book2.rotation = new Vector3(Tools.ToRadians(90),0,0);\n        book2.material = new StandardMaterial(\"\", World.scene);\n        book2.material.diffuseColor = new Color3.Red();\n        book2.material = mat;\n        //book2.isVisible = false\n\n\n        book2.actionManager = new ActionManager(World.scene);\n        book2.actionManager.registerAction(\n            new ExecuteCodeAction(\n                {\n                    trigger: ActionManager.OnPickTrigger\n                    //parameter: 'r'\n                },\n                function () {World.clickBook(4,wall1HiddenDoor) }\n            )\n        );\n\n        var book3 = MeshBuilder.CreatePlane(\"book3\", {height:0.9, width: 0.14, sideOrientation: Mesh.DOUBLESIDE}, World.scene)\n        book3.parent = bookShelfMesh\n        //book1.position = new Vector3(0.355,0.595,0.30)\n        book3.position = book3.position.add(new Vector3(2.86,-1.2,-5.2))\n        book3.rotation = new Vector3(Tools.ToRadians(90),0,0);\n        book3.material = new StandardMaterial(\"\", World.scene);\n        book3.material.diffuseColor = new Color3.Blue();\n        book3.material = mat;\n        //book3.isVisible = false\n\n\n        book3.actionManager = new ActionManager(World.scene);\n        book3.actionManager.registerAction(\n            new ExecuteCodeAction(\n                {\n                    trigger: ActionManager.OnPickTrigger\n                    //parameter: 'r'\n                },\n                function () {World.clickBook(1,wall1HiddenDoor) }\n            )\n        );\n\n        var book4 = MeshBuilder.CreatePlane(\"book4\", {height:0.9, width: 0.14, sideOrientation: Mesh.DOUBLESIDE}, World.scene)\n        book4.parent = bookShelfMesh\n        //book1.position = new Vector3(0.355,0.595,0.30)\n        book4.position = book4.position.add(new Vector3(2.68,-1.2,-5.2))\n        book4.rotation = new Vector3(Tools.ToRadians(90),0,0);\n        book4.material = new StandardMaterial(\"\", World.scene);\n        book4.material.diffuseColor = new Color3(0, 206/255, 209/255)\n        book4.material = mat;\n        //book4.isVisible = false\n\n        book4.actionManager = new ActionManager(World.scene);\n        book4.actionManager.registerAction(\n            new ExecuteCodeAction(\n                {\n                    trigger: ActionManager.OnPickTrigger\n                    //parameter: 'r'\n                },\n                function () {World.clickBook(2,wall1HiddenDoor) }\n            )\n        );\n    }\n\n    static setUpDrawers(deskMesh) {\n        var drawer1 = MeshBuilder.CreatePlane(\"plane1\", {height:0.14, width: 0.46, sideOrientation: Mesh.DOUBLESIDE}, World.scene)\n        drawer1.parent = deskMesh\n        drawer1.position = new Vector3(0.355,0.595,0.30)\n        drawer1.material = new StandardMaterial(\"\", World.scene);\n        drawer1.material.diffuseColor = new Color3.Green();\n\n        drawer1.actionManager = new ActionManager(World.scene);\n        drawer1.actionManager.registerAction(\n            new ExecuteCodeAction(\n                {\n                    trigger: ActionManager.OnPickTrigger\n                    //parameter: 'r'\n                },\n                function () { World.scene.activeCamera == World.camera ? World.openDrawer(1) : World.closeDrawer()}\n            )\n        );\n  \n\n        var drawer2 = MeshBuilder.CreatePlane(\"plane2\", {height:0.14, width: 0.46, sideOrientation: Mesh.DOUBLESIDE}, World.scene)\n        drawer2.parent = deskMesh\n        drawer2.position = new Vector3(0.355,0.445,0.30)\n        drawer2.material = new StandardMaterial(\"\", World.scene);\n        drawer2.material.diffuseColor = new Color3.Red(); \n\n\n        drawer2.actionManager = new ActionManager(World.scene);\n        drawer2.actionManager.registerAction(\n            new ExecuteCodeAction(\n                {\n                    trigger: ActionManager.OnPickTrigger\n                    //parameter: 'r'\n                },\n                function () { World.scene.activeCamera == World.camera ? World.openDrawer(2) : World.closeDrawer()}\n            )\n        );\n\n        var drawer3 = MeshBuilder.CreatePlane(\"plane3\", {height:0.14, width: 0.46, sideOrientation: Mesh.DOUBLESIDE}, World.scene)\n        drawer3.parent = deskMesh\n        drawer3.position = new Vector3(0.355,0.295,0.30)\n        drawer3.material = new StandardMaterial(\"\", World.scene);\n        drawer3.material.diffuseColor = new Color3.Blue();\n\n        drawer3.actionManager = new ActionManager(World.scene);\n        drawer3.actionManager.registerAction(\n            new ExecuteCodeAction(\n                {\n                    trigger: ActionManager.OnPickTrigger\n                    //parameter: 'r'\n                },\n                function () { World.scene.activeCamera == World.camera ? World.openDrawer(3) : World.closeDrawer()}\n            )\n        );\n\n        var drawer4 = MeshBuilder.CreatePlane(\"plane4\", {height:0.14, width: 0.46, sideOrientation: Mesh.DOUBLESIDE}, World.scene)\n        drawer4.parent = deskMesh\n        drawer4.position = new Vector3(0.355,0.15,0.30)\n        drawer4.material = new StandardMaterial(\"\", World.scene);\n        drawer4.material.diffuseColor = new Color3(0, 206/255, 209/255)\n        drawer4.actionManager = new ActionManager(World.scene);\n        drawer4.actionManager.registerAction(\n            new ExecuteCodeAction(\n                {\n                    trigger: ActionManager.OnPickTrigger\n                    //parameter: 'r'\n                },\n                function () { World.scene.activeCamera == World.camera ? World.openDrawer(4) : World.closeDrawer()}\n            )\n        );         \n\n    }\n    \n    static setupLights() {\n        //light.intensity = 0.5;\n        var light0 = new DirectionalLight(\"Omni\", new Vector3(-7,5,17), World.scene);\n        //var light2 = new DirectionalLight(\"Omni\", new Vector3(7,-5,-17), World.scene);\n        //var light4 = new DirectionalLight(\"Omni\", new Vector3(0,0,0), World.scene);\n        var light1 = new PointLight(\"Omni\", new Vector3(-3,5,13), World.scene); \n        //var light3 = new PointLight(\"Omni\", new Vector3(3,5,-13), World.scene);  \n        //var light5 = new PointLight(\"Omni\", new Vector3(0,0,0), World.scene);\n        //var light6 = new PointLight(\"Omni\", new Vector3(0,3,-20), World.scene);\n\n       \n    }\n    \n    /*static updateCamera() {\n        if (typeof Avatar.mesh !== \"undefined\" && typeof World.camera !== \"undefined\" && Avatar.mesh !== null) {\n            World.camera.position.x = Avatar.mesh.position.x;\n            World.camera.position.y = Avatar.mesh.position.y + Avatar.height;\n            World.camera.position.z = Avatar.mesh.position.z;\n            World.camera.position.z -= Math.sin(Avatar.absoluteRotation - Math.PI) * -1 * World.cameraDistance;\n            World.camera.position.x -= Math.cos(Avatar.absoluteRotation - Math.PI) * -1 * World.cameraDistance;\n            var lookAt = new Vector3(Avatar.mesh.position.x, Avatar.mesh.position.y + Avatar.height, Avatar.mesh.position.z);\n            World.camera.setTarget(lookAt);\n        }\n    }*/\n}\n\nWorld.cameraDistance = 1.5;","/Users/corygallagher/Documents/node_projects/escapegame/client/src/BillBoard.js",[],"/Users/corygallagher/Documents/node_projects/escapegame/client/src/Login.js",[],"/Users/corygallagher/Documents/node_projects/escapegame/client/src/Play.js",["81","82"],"import React, { useEffect, useRef, useState } from \"react\";\nimport IO from './IO'\nimport Login from './Login'\nimport './App.css';\nimport Peer from \"simple-peer\";\nimport { useParams } from \"react-router\";\n\n\n\n\n\nIO.init()\n\n\nconst AudioTag = (props) => {\n    const ref = useRef();\n\n    useEffect(() => {\n        props.peer.on(\"stream\", stream => {\n            ref.current.srcObject = stream;\n        })\n    }, []);\n\n    return (\n        <audio autoPlay ref={ref} />\n    );\n}\n\n\nconst Play = (props) => {\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userAudio = useRef();\n  const peersRef = useRef([]);\n  \n  const { roomId } = useParams();\n\n  \n  //const roomID = \"1\";\n\n   useEffect(() => {\n        socketRef.current = IO.socket\n        navigator.mediaDevices.getUserMedia({audio: true }).then(stream => {\n            //userAudio.current.srcObject = stream;\n            //socketRef.current.emit(\"join room\", roomID);\n            socketRef.current.on(\"all users\", users => {\n                const peers = [];\n                users.forEach(userID => {\n                    const peer = createPeer(userID, socketRef.current.id, stream);\n                    peersRef.current.push({\n                        peerID: userID,\n                        peer,\n                    })\n                    peers.push(peer);\n                })\n                setPeers(peers);\n            })\n\n            socketRef.current.on(\"user joined\", payload => {\n                const peer = addPeer(payload.signal, payload.callerID, stream);\n                peersRef.current.push({\n                    peerID: payload.callerID,\n                    peer,\n                })\n\n                setPeers(users => [...users, peer]);\n            });\n\n            socketRef.current.on(\"receiving returned signal\", payload => {\n                const item = peersRef.current.find(p => p.peerID === payload.id);\n                item.peer.signal(payload.signal);\n            });\n        })\n    }, []);\n\n    function createPeer(userToSignal, callerID, stream) {\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            stream,\n        });\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\n        })\n\n        return peer;\n    }\n\n    function addPeer(incomingSignal, callerID, stream) {\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream,\n        })\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"returning signal\", { signal, callerID })\n        })\n        peer.signal(incomingSignal);\n\n        return peer;\n    }\n\n  return (\n    <div>\n\n        <Login roomId={roomId} />\n        {peers.map((peer, index) => {\n                return (\n                    <AudioTag key={index} peer={peer} />\n                );\n        })}\n        <p>{IO.currentRoomId && (\"Share this link to invite others to your escape room: \" + window.location.href +  IO.currentRoomId)}</p>\n        <canvas id=\"canvas\" style={{\"width\": \"100%\", \"height\": \"100%\"}}/>\n    </div>\n  )\n\n}\n\nexport default Play",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":3,"column":8,"nodeType":"89","messageId":"90","endLine":3,"endColumn":13},{"ruleId":"87","severity":1,"message":"91","line":6,"column":10,"nodeType":"89","messageId":"90","endLine":6,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":38,"column":17,"nodeType":"94","messageId":"95","endLine":45,"endColumn":18},{"ruleId":"87","severity":1,"message":"96","line":1,"column":8,"nodeType":"89","messageId":"90","endLine":1,"endColumn":17},{"ruleId":"87","severity":1,"message":"97","line":3,"column":19,"nodeType":"89","messageId":"90","endLine":3,"endColumn":35},{"ruleId":"87","severity":1,"message":"98","line":3,"column":50,"nodeType":"89","messageId":"90","endLine":3,"endColumn":54},{"ruleId":"87","severity":1,"message":"99","line":3,"column":56,"nodeType":"89","messageId":"90","endLine":3,"endColumn":61},{"ruleId":"87","severity":1,"message":"100","line":3,"column":63,"nodeType":"89","messageId":"90","endLine":3,"endColumn":69},{"ruleId":"87","severity":1,"message":"101","line":4,"column":8,"nodeType":"89","messageId":"90","endLine":4,"endColumn":13},{"ruleId":"102","severity":1,"message":"103","line":78,"column":14,"nodeType":"104","messageId":"105","endLine":78,"endColumn":25},{"ruleId":"92","severity":1,"message":"93","line":10,"column":9,"nodeType":"94","messageId":"95","endLine":28,"endColumn":10},{"ruleId":"92","severity":1,"message":"93","line":32,"column":9,"nodeType":"94","messageId":"95","endLine":50,"endColumn":10},{"ruleId":"87","severity":1,"message":"106","line":8,"column":47,"nodeType":"89","messageId":"90","endLine":8,"endColumn":54},{"ruleId":"87","severity":1,"message":"107","line":8,"column":73,"nodeType":"89","messageId":"90","endLine":8,"endColumn":87},{"ruleId":"87","severity":1,"message":"108","line":8,"column":88,"nodeType":"89","messageId":"90","endLine":8,"endColumn":110},{"ruleId":"87","severity":1,"message":"109","line":8,"column":167,"nodeType":"89","messageId":"90","endLine":8,"endColumn":182},{"ruleId":"92","severity":1,"message":"93","line":90,"column":9,"nodeType":"94","messageId":"95","endLine":96,"endColumn":10},{"ruleId":"92","severity":1,"message":"93","line":184,"column":9,"nodeType":"94","messageId":"95","endLine":202,"endColumn":10},{"ruleId":"110","severity":1,"message":"111","line":306,"column":17,"nodeType":"112","messageId":"113","endLine":306,"endColumn":22},{"ruleId":"114","severity":1,"message":"115","line":766,"column":56,"nodeType":"112","messageId":"116","endLine":766,"endColumn":58},{"ruleId":"114","severity":1,"message":"115","line":785,"column":56,"nodeType":"112","messageId":"116","endLine":785,"endColumn":58},{"ruleId":"114","severity":1,"message":"115","line":802,"column":56,"nodeType":"112","messageId":"116","endLine":802,"endColumn":58},{"ruleId":"114","severity":1,"message":"115","line":818,"column":56,"nodeType":"112","messageId":"116","endLine":818,"endColumn":58},{"ruleId":"87","severity":1,"message":"117","line":826,"column":13,"nodeType":"89","messageId":"90","endLine":826,"endColumn":19},{"ruleId":"87","severity":1,"message":"118","line":829,"column":13,"nodeType":"89","messageId":"90","endLine":829,"endColumn":19},{"ruleId":"119","severity":1,"message":"120","line":22,"column":8,"nodeType":"121","endLine":22,"endColumn":10,"suggestions":"122"},{"ruleId":"87","severity":1,"message":"123","line":33,"column":9,"nodeType":"89","messageId":"90","endLine":33,"endColumn":18},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'BillBoard' is defined but never used.","'StandardMaterial' is defined but never used.","'Axis' is defined but never used.","'Space' is defined but never used.","'Color3' is defined but never used.","'Input' is defined but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'Vector4' is defined but never used.","'SetValueAction' is defined but never used.","'InterpolateValueAction' is defined but never used.","'UniversalCamera' is defined but never used.","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'light0' is assigned a value but never used.","'light1' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.peer'. Either include it or remove the dependency array.","ArrayExpression",["126"],"'userAudio' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},"Update the dependencies array to be: [props.peer]",{"range":"129","text":"130"},[406,408],"[props.peer]"]