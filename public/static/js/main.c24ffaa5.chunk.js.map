{"version":3,"sources":["BillBoard.js","Input.js","Avatar.js","World.js","Player.js","IO.js","Login.js","Play.js","App.js","reportWebVitals.js","index.js"],"names":["Billboard","playerMesh","username","console","log","this","create","mesh","MeshBuilder","CreatePlane","width","height","World","scene","position","Vector3","Zero","y","Avatar","advancedTexture","GUI","CreateForMesh","name","containerUI","thickness","addControl","text","fontFamily","fontWeight","color","outlineColor","outlineWidth","fontSize","billboardMode","Mesh","BILLBOARDMODE_ALL","parent","Input","window","addEventListener","keydownEvent","keyupEvent","e","keyCode","preventDefault","key","up","left","right","down","CreateBox","depth","isVisible","x","z","rotation","absoluteRotation","IO","socket","emit","command","send","rotationSpeed","walkSpeed","canvas","document","getElementById","engine","Engine","Scene","gravity","collisionsEnabled","setupCamera","setupLights","setupGround","setupWalls","runRenderLoop","render","update","camera","resize","FreeCamera","attachControl","activeCamera","checkCollisions","applyGravity","ellipsoid","speed","keysUp","push","keysDown","keysRight","keysLeft","arcCamera","ArcRotateCamera","Math","PI","layerMask","ground","material","StandardMaterial","diffuseTexture","Texture","drawerNumber","boxColor","myPath","boxSize","currentDrawer","CreateTube","path","tessellation","cap","radius","sideOrientation","DOUBLESIDE","updatable","Color3","Blue","Green","Red","Purple","box","diffuseColor","light","HemisphericLight","CreateFullscreenUI","layer","button","CreateImageButton","horizontalAlignment","HORIZONTAL_ALIGNMENT_RIGHT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","background","onPointerUpObservable","add","closeDrawer","dispose","mesh1","mesh2","input","maxWidth","VERTICAL_ALIGNMENT_BOTTOM","keyboard","addKeysRow","connect","moveFocusToControl","onBlurObservable","wall1","wall2Left","Tools","ToRadians","wall2Right","wall2Arch","wall2Base","safeBack","safeBackBorder","safeFront","actionManager","ActionManager","registerAction","ExecuteCodeAction","trigger","OnPickTrigger","openNumPad","safeFrontBorder","wall3","wall4Left","wall4Right","wall4Arch","wall4Door","roof","SceneLoader","ImportMesh","newMeshes","forEach","scaling","getBoundingInfo","boundingBox","extendSize","scale","drawer1","openDrawer","drawer2","drawer3","drawer4","DirectionalLight","PointLight","cameraDistance","Player","id","billboard","BillBoard","all","rotationQuaternion","Quaternion","FromEulerAngles","playerID","objPlayer","data","parseInt","find","transform","destroy","filter","obj","Array","currentRoomId","io","on","success","roomId","init","remove","move","Login","props","useState","userName","setUsername","onChange","target","value","type","onClick","login","AudioTag","ref","useRef","useEffect","peer","stream","current","srcObject","autoPlay","Play","peers","setPeers","socketRef","peersRef","useParams","navigator","mediaDevices","getUserMedia","audio","then","users","userID","userToSignal","callerID","Peer","initiator","trickle","signal","createPeer","peerID","payload","incomingSignal","addPeer","p","map","index","style","App","children","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"+SAOqBA,E,WAEjB,WAAYC,EAAYC,GAAW,oBAC/BC,QAAQC,IAAIF,GAEZG,KAAKJ,WAAaA,EAClBI,KAAKH,SAAWA,EAChBG,KAAKC,S,qDAILD,KAAKE,KAAOC,IAAYC,YAAY,YAAa,CAACC,MAAOV,EAAUU,MAAOC,OAAQX,EAAUW,QAASC,EAAMC,OAC3GR,KAAKE,KAAKO,SAAWC,IAAQC,OAC7BX,KAAKE,KAAKO,SAASG,EAAIC,EAAOP,OAASX,EAAUW,OACjD,IAAIQ,EAAkBC,IAA2BC,cAAchB,KAAKE,KAAM,KAAM,KAChFY,EAAgBG,KAAO,kBACvB,IAAIC,EAAc,IAAIH,IAAc,aACpCG,EAAYC,UAAY,EACxBD,EAAYZ,OAAS,QACrBY,EAAYb,MAAQ,QACpBS,EAAgBM,WAAWF,GAC3BlB,KAAKqB,KAAO,IAAIN,IAChBf,KAAKqB,KAAKC,WAAa,QACvBtB,KAAKqB,KAAKE,WAAa,OACvBvB,KAAKqB,KAAKG,MAAQ,QAClBxB,KAAKqB,KAAKI,aAAe,QACzBzB,KAAKqB,KAAKK,aAAe,GACzB1B,KAAKqB,KAAKM,SAAW,IACrBT,EAAYE,WAAWpB,KAAKqB,MAC5BrB,KAAKqB,KAAKA,KAAOrB,KAAKH,SACtBG,KAAKE,KAAK0B,cAAgBC,IAAKC,kBAC/B9B,KAAKE,KAAK6B,OAAS/B,KAAKJ,e,KAIhCD,EAAUW,OAAS,EACnBX,EAAUU,MAAQ,E,IC3CG2B,E,oGAGbC,OAAOC,iBAAiB,UAAWlC,KAAKmC,cACxCF,OAAOC,iBAAiB,QAASlC,KAAKoC,YACtCH,OAAOC,iBAAiB,OAAQlC,KAAKoC,c,mCAGrBC,GAChB,OAAQA,EAAEC,SACN,KAAK,GACL,KAAK,GACAD,EAAEE,iBACHP,EAAMQ,IAAIC,IAAK,EACf,MACJ,KAAK,GACL,KAAK,GACDT,EAAMQ,IAAIE,MAAO,EACjB,MACJ,KAAK,GACL,KAAK,GACDV,EAAMQ,IAAIG,OAAQ,EAClB,MACJ,KAAK,GACL,KAAK,GACDX,EAAMQ,IAAII,MAAO,K,iCAKXP,GACd,OAAQA,EAAEC,SACN,KAAK,GACL,KAAK,GACDD,EAAEE,iBACFP,EAAMQ,IAAIC,IAAK,EACf,MACJ,KAAK,GACL,KAAK,GACDT,EAAMQ,IAAIE,MAAO,EACjB,MACJ,KAAK,GACL,KAAK,GACDV,EAAMQ,IAAIG,OAAQ,EAClB,MACJ,KAAK,GACL,KAAK,GACDX,EAAMQ,IAAII,MAAO,O,KAMjCZ,EAAMQ,IAAM,CACRI,MAAK,EACLH,IAAG,EACHC,MAAK,EACLC,OAAM,G,IChDW9B,E,kGAELhB,GACRgB,EAAOX,KAAOC,IAAY0C,UAAU,SAAU,CAACvC,OAAQO,EAAOP,OAAQD,MAAO,EAAGyC,MAAO,GAAIvC,EAAMC,OACjGK,EAAOX,KAAKO,SAAWC,IAAQC,OAC/BE,EAAOX,KAAKO,SAASG,EAAIC,EAAOP,OAAO,EACvCO,EAAOX,KAAK6C,WAAY,EAGxBlC,EAAOhB,SAAWA,I,6BAiBlB,IAAImD,EAAInC,EAAOX,KAAKO,SAASuC,EACzBpC,EAAIC,EAAOX,KAAKO,SAASG,EACzBqC,EAAIpC,EAAOX,KAAKO,SAASwC,EACzBC,EAAWrC,EAAOsC,iBACtBC,EAAGC,OAAOC,KAAK,YAAa,CAACC,QAAS,cAAgBP,IAAGpC,IAAGqC,IAAGC,e,6BAGrDzC,GACU,OAAhBI,EAAOX,OACPW,EAAOX,KAAKO,SAAWA,EACvBI,EAAO2C,Y,KA6BnB3C,EAAOsC,iBAAmB,EAC1BtC,EAAOP,OAAS,EAChBO,EAAOX,KAAO,KACdW,EAAO4C,cAAgB,IACvB5C,EAAO6C,UAAY,K,kBCrEEnD,E,oGAEbA,EAAMoD,OAASC,SAASC,eAAe,UACvC,IAAIC,EAAS,IAAIC,IAAOxD,EAAMoD,QAAQ,GAGtCpD,EAAMC,MAAQ,IAAIwD,IAAMF,GACxBvD,EAAMC,MAAMyD,QAAU,IAAIvD,IAAQ,GAAI,GAAK,GAC3CH,EAAMC,MAAM0D,mBAAoB,EAIhC3D,EAAM4D,cACN5D,EAAM6D,cACN7D,EAAM8D,cACN9D,EAAM+D,aAGNR,EAAOS,eAAc,WACjBhE,EAAMC,MAAMgE,SACZ3D,EAAO4D,OAAOlE,EAAMmE,OAAOjE,aAK/BwB,OAAOC,iBAAiB,UAAU,WAC9B4B,EAAOa,c,oCAkBXpE,EAAMmE,OAAS,IAAIE,IAAW,aAAc,IAAIlE,KAAS,EAAE,GAAG,GAAIH,EAAMC,OACxED,EAAMmE,OAAOG,cAActE,EAAMoD,QAAQ,GAEzCpD,EAAMC,MAAMsE,aAAevE,EAAMmE,OACjCnE,EAAMmE,OAAOK,iBAAkB,EAC/BxE,EAAMmE,OAAOM,cAAe,EAC5BzE,EAAMmE,OAAOO,UAAY,IAAIvE,IAAQ,EAAK,IAAM,GAChDH,EAAMmE,OAAOQ,MAAQ,GACrB3E,EAAMmE,OAAOS,OAAOC,KAAK,IACzB7E,EAAMmE,OAAOW,SAASD,KAAK,IAC3B7E,EAAMmE,OAAOY,UAAUF,KAAK,IAC5B7E,EAAMmE,OAAOa,SAASH,KAAK,IAE3B7E,EAAMiF,UAAY,IAAIC,IAAgB,YAAa,EAAIC,KAAKC,GAAK,EAAG,EAAID,KAAKC,GAAK,EAAG,EAAG,IAAIjF,IAAQ,EAAG,EAAG,GAAIH,EAAMC,OACpHD,EAAMiF,UAAUI,UAAY,Y,oCAS5B,IAAIC,EAAShE,IAAKzB,YAAY,SAAU,GAAMG,EAAMC,OACpDqF,EAAOC,SAAW,IAAIC,IAAiB,YAAaxF,EAAMC,OAC1DqF,EAAOC,SAASE,eAAiB,IAAIC,IAAQ,yBAA0B1F,EAAMC,OAC7EqF,EAAOpF,SAAW,IAAIC,IAAQ,EAAE,EAAE,GAClCmF,EAAO3C,SAAW,IAAIxC,IAAQgF,KAAKC,GAAK,EAAG,EAAG,GAC9CE,EAAOd,iBAAkB,I,iCAKXmB,GACd,IASIC,EARAC,EAAS,CACJ,IAAI1F,IAAQ,EAAG,EAAK,GACrB,IAAIA,IAAQ,EAAG2F,GAAW,IAE9BC,EAAgBnG,IAAYoG,WAAW,gBAAiB,CAACC,KAAMJ,EAAQK,aAAa,EAAGC,IAAK,EAAGC,OALrF,EAKsGC,gBAAiB/E,IAAKgF,WAAYC,WAAW,GAAOvG,EAAMC,OAK9K,OAJA8F,EAAcR,SAAW,IAAIC,IAAiB,GAAIxF,EAAMC,OACxD8F,EAAcR,SAASE,eAAiB,IAAIC,IAAQ,mBAAoB1F,EAAMC,OAC9E8F,EAAcV,UAAY,UAElBM,GACN,KAAK,EACHC,EAAY,IAAIY,IAAOC,KACvB,MACF,KAAK,EACHb,EAAY,IAAIY,IAAOE,MACvB,MACF,KAAK,EACHd,EAAW,IAAIY,IAAOG,IACtB,MACF,KAAK,EACHf,EAAW,IAAIY,IAAOI,OAK1B,IAAIC,EAAMjH,IAAY0C,UAAU,OAAQ,CAACxC,MAAO,GAAKC,OAAQ,GAAKwC,MAAO,GAAK8D,gBAAiB/E,IAAKgF,YAAatG,EAAMC,OACvH4G,EAAI3G,SAASG,EAAI,KACjBwG,EAAItB,SAAW,IAAIC,IAAiB,GAAIxF,EAAMC,OAC9C4G,EAAItB,SAASuB,aAAelB,EAC5BiB,EAAIrF,OAAUuE,EACdc,EAAIxB,UAAY,UAKhBrF,EAAMC,MAAMsE,aAAevE,EAAMiF,UACjCjF,EAAMiF,UAAUX,cAActE,EAAMoD,QAAQ,GAC5C,IAAI2D,EAAQ,IAAIC,IAAiB,SAAU,IAAI7G,IAAQ,EAAG,EAAG,IAAMH,EAAMC,OAKrEM,EAAkBC,IAA2ByG,mBAAmB,MACpE1G,EAAgB2G,MAAM7B,UAAY,UAElC,IAAI8B,EAAS3G,IAAW4G,kBAAkB,MAAO,SAAU,IAC3DD,EAAOE,oBAAsB7G,IAAY8G,2BACzCH,EAAOI,kBAAoB/G,IAAYgH,uBACvCL,EAAOrH,MAAQ,GACfqH,EAAOpH,OAAS,OAChBoH,EAAOlG,MAAQ,QACfkG,EAAOM,WAAa,QACpBN,EAAOO,sBAAsBC,KAAI,WAC7B3H,EAAM4H,YAAY7B,EAAcgB,MAEpCxG,EAAgBM,WAAWsG,K,kCAKZpB,EAAcgB,GAC7BhB,EAAc8B,UACd7H,EAAMC,MAAMsE,aAAevE,EAAMmE,OACjC4C,EAAMc,Y,iCAIQC,EAAMC,GACpB,IAAIxH,EAAkBC,IAA2ByG,mBAAmB,MAEhEe,EAAQ,IAAIxH,IAChBwH,EAAMlI,MAAQ,IACdkI,EAAMC,SAAW,IACjBD,EAAMjI,OAAS,OACfiI,EAAM/G,MAAQ,QACd+G,EAAMP,WAAa,QACnBlH,EAAgBM,WAAWmH,GAG3B,IAAIb,EAAS3G,IAAW4G,kBAAkB,eAAgB,SAAU,IACpED,EAAOE,oBAAsB7G,IAAY8G,2BACzCH,EAAOI,kBAAoB/G,IAAY0H,0BACvCf,EAAOrH,MAAQ,GACfqH,EAAOpH,OAAS,OAChBoH,EAAOlG,MAAQ,QACfkG,EAAOM,WAAa,QAOpBlH,EAAgBM,WAAWsG,GAE3B,IAAIgB,EAAW,IAAI3H,IACnB2H,EAASC,WAAW,CAClB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,WAEFD,EAASZ,kBAAoB/G,IAAY0H,0BACzC3H,EAAgBM,WAAWsH,GAC3BA,EAASE,QAAQL,GACjBzH,EAAgB+H,mBAAmBN,GAEnCA,EAAMO,iBAAiBZ,KAAI,WAEnBG,EAAMD,UACNE,EAAMF,UACNG,EAAMH,UACNV,EAAOU,e,0EAcf,IAAIW,EAAQ5I,IAAY0C,UAAU,QAAS,CAACxC,MAAO,GAAIC,OAAQ,GAAIwC,MAAO,EAAG8D,gBAAiB/E,IAAKgF,YAAatG,EAAMC,OACtHuI,EAAMhE,iBAAkB,EACxBgE,EAAMjD,SAAW,IAAIC,IAAiB,IACtCgD,EAAMtI,SAAW,IAAIC,IAAQ,EAAE,EAAE,IACjCqI,EAAMjD,SAASE,eAAiB,IAAIC,IAAQ,0BAA2B1F,EAAMC,OAU7E,IAAIwI,EAAY7I,IAAY0C,UAAU,YAAa,CAACxC,MAAO,EAAGC,OAAQ,GAAIwC,MAAO,EAAG8D,gBAAiB/E,IAAKgF,YAAatG,EAAMC,OAC7HwI,EAAUjE,iBAAkB,EAC5BiE,EAAUvI,SAAW,IAAIC,IAAQ,GAAG,GAAG,GACvCsI,EAAUlD,SAAW,IAAIC,IAAiB,IAC1CiD,EAAU9F,SAAW,IAAIxC,IAAQ,EAAEuI,IAAMC,UAAU,IAAI,GACvDF,EAAUlD,SAASE,eAAiB,IAAIC,IAAQ,0BAA2B1F,EAAMC,OAEjF,IAAI2I,EAAahJ,IAAY0C,UAAU,aAAc,CAACxC,MAAO,EAAGC,OAAQ,GAAIwC,MAAO,EAAG8D,gBAAiB/E,IAAKgF,YAAatG,EAAMC,OAC/H2I,EAAWpE,iBAAkB,EAC7BoE,EAAW1I,SAAW,IAAIC,IAAQ,GAAG,EAAE,GACvCyI,EAAWrD,SAAW,IAAIC,IAAiB,IAC3CoD,EAAWjG,SAAW,IAAIxC,IAAQ,EAAEuI,IAAMC,UAAU,IAAI,GACxDC,EAAWrD,SAASE,eAAiB,IAAIC,IAAQ,0BAA2B1F,EAAMC,OAElF,IAAI4I,EAAYjJ,IAAY0C,UAAU,YAAa,CAACxC,MAAO,EAAGC,OAAQ,EAAGwC,MAAO,EAAG8D,gBAAiB/E,IAAKgF,YAAatG,EAAMC,OAC5H4I,EAAUrE,iBAAkB,EAC5BqE,EAAU3I,SAAW,IAAIC,IAAQ,GAAG,EAAE,GACtC0I,EAAUtD,SAAW,IAAIC,IAAiB,IAC1CqD,EAAUlG,SAAW,IAAIxC,IAAQ,EAAEuI,IAAMC,UAAU,IAAI,GACvDE,EAAUtD,SAASE,eAAiB,IAAIC,IAAQ,0BAA2B1F,EAAMC,OAEjF,IAAI6I,EAAYlJ,IAAY0C,UAAU,YAAa,CAACxC,MAAO,EAAGC,OAAQ,EAAGwC,MAAO,EAAG8D,gBAAiB/E,IAAKgF,YAAatG,EAAMC,OAC5H6I,EAAUtE,iBAAkB,EAC5BsE,EAAU5I,SAAW,IAAIC,IAAQ,IAAI,EAAE,GACvC2I,EAAUvD,SAAW,IAAIC,IAAiB,IAC1CsD,EAAUnG,SAAW,IAAIxC,IAAQ,EAAEuI,IAAMC,UAAU,IAAI,GACvDG,EAAUvD,SAASE,eAAiB,IAAIC,IAAQ,0BAA2B1F,EAAMC,OAGjF,IAAI8I,EAAWnJ,IAAYC,YAAY,WAAY,CAACE,OAAO,EAAGD,MAAO,GAAIE,EAAMC,OAC/E8I,EAAS7I,SAAW,IAAIC,IAAQ,GAAI,EAAG,GACvC4I,EAASxD,SAAW,IAAIC,IAAiB,GAAIxF,EAAMC,OACnD8I,EAASpG,SAAW,IAAIxC,IAAQ,EAAEuI,IAAMC,UAAU,IAAI,GACtDI,EAASvE,iBAAkB,EAE3B,IAAIwE,EAAiBpJ,IAAYC,YAAY,iBAAkB,CAACE,OAAO,EAAGD,MAAO,GAAIE,EAAMC,OAC3F+I,EAAe9I,SAAW,IAAIC,IAAQ,KAAM,EAAG,GAC/C6I,EAAerG,SAAW,IAAIxC,IAAQ,EAAEuI,IAAMC,UAAU,IAAI,GAC5DK,EAAexE,iBAAkB,EACjCwE,EAAexG,WAAY,EAG3B,IAAIyG,EAAYrJ,IAAYC,YAAY,YAAa,CAACE,OAAO,EAAGD,MAAO,GAAIE,EAAMC,OACjFgJ,EAAU/I,SAAW,IAAIC,IAAQ,GAAI,EAAG,GACxC8I,EAAU1D,SAAW,IAAIC,IAAiB,GAAIxF,EAAMC,OACpDgJ,EAAUtG,SAAW,IAAIxC,IAAQ,EAAEuI,IAAMC,UAAU,IAAI,GACvDM,EAAU1D,SAASE,eAAiB,IAAIC,IAAQ,mBAAoB1F,EAAMC,OAC1E8I,EAASvE,iBAAkB,EAE3ByE,EAAUC,cAAgB,IAAIC,IAAcnJ,EAAMC,OAClDgJ,EAAUC,cAAcE,eACpB,IAAIC,IACA,CACIC,QAASH,IAAcI,gBAG3B,WAAcvJ,EAAMwJ,WAAWP,EAAWQ,OAMlD,IAAIA,EAAkB7J,IAAYC,YAAY,kBAAmB,CAACE,OAAO,EAAGD,MAAO,GAAIE,EAAMC,OAC7FwJ,EAAgBvJ,SAAW,IAAIC,IAAQ,IAAK,EAAG,GAC/CsJ,EAAgB9G,SAAW,IAAIxC,IAAQ,EAAEuI,IAAMC,UAAU,IAAI,GAC7Dc,EAAgBjF,iBAAkB,EAClCiF,EAAgBjH,WAAY,EAM5B,IAAIkH,EAAQ9J,IAAY0C,UAAU,QAAS,CAACxC,MAAO,GAAIC,OAAQ,GAAIwC,MAAO,EAAG8D,gBAAiB/E,IAAKgF,YAAatG,EAAMC,OACtHyJ,EAAMlF,iBAAkB,EACxBkF,EAAMnE,SAAW,IAAIC,IAAiB,IACtCkE,EAAMxJ,SAAW,IAAIC,IAAQ,EAAE,GAAG,IAClCuJ,EAAMnE,SAASE,eAAiB,IAAIC,IAAQ,0BAA2B1F,EAAMC,OAG7E,IAAI0J,EAAY/J,IAAY0C,UAAU,YAAa,CAACxC,MAAO,EAAGC,OAAQ,GAAIwC,MAAO,EAAG8D,gBAAiB/E,IAAKgF,YAAatG,EAAMC,OAC7H0J,EAAUnF,iBAAkB,EAC5BmF,EAAUzJ,SAAW,IAAIC,KAAS,GAAG,GAAG,GACxCwJ,EAAUpE,SAAW,IAAIC,IAAiB,IAC1CmE,EAAUhH,SAAW,IAAIxC,IAAQ,EAAEuI,IAAMC,UAAU,IAAI,GACvDgB,EAAUpE,SAASE,eAAiB,IAAIC,IAAQ,0BAA2B1F,EAAMC,OAEjF,IAAI2J,EAAahK,IAAY0C,UAAU,aAAc,CAACxC,MAAO,EAAGC,OAAQ,GAAIwC,MAAO,EAAG8D,gBAAiB/E,IAAKgF,YAAatG,EAAMC,OAC/H2J,EAAWpF,iBAAkB,EAC7BoF,EAAW1J,SAAW,IAAIC,KAAS,GAAG,EAAE,GACxCyJ,EAAWrE,SAAW,IAAIC,IAAiB,IAC3CoE,EAAWjH,SAAW,IAAIxC,IAAQ,EAAEuI,IAAMC,UAAU,IAAI,GACxDiB,EAAWrE,SAASE,eAAiB,IAAIC,IAAQ,0BAA2B1F,EAAMC,OAElF,IAAI4J,EAAYjK,IAAY0C,UAAU,YAAa,CAACxC,MAAO,EAAGC,OAAQ,EAAGwC,MAAO,EAAG8D,gBAAiB/E,IAAKgF,YAAatG,EAAMC,OAC5H4J,EAAUrF,iBAAkB,EAC5BqF,EAAU3J,SAAW,IAAIC,KAAS,GAAG,EAAE,GACvC0J,EAAUtE,SAAW,IAAIC,IAAiB,IAC1CqE,EAAUlH,SAAW,IAAIxC,IAAQ,EAAEuI,IAAMC,UAAU,IAAI,GACvDkB,EAAUtE,SAASE,eAAiB,IAAIC,IAAQ,0BAA2B1F,EAAMC,OAEjF,IAAI6J,EAAYlK,IAAY0C,UAAU,YAAa,CAACxC,MAAO,EAAGC,OAAQ,EAAGwC,MAAO,EAAG8D,gBAAiB/E,IAAKgF,YAAatG,EAAMC,OAC5H6J,EAAUtF,iBAAkB,EAC5BsF,EAAU5J,SAAW,IAAIC,KAAS,GAAG,EAAE,GACvC2J,EAAUvE,SAAW,IAAIC,IAAiB,IAC1CsE,EAAUnH,SAAW,IAAIxC,IAAQ,EAAEuI,IAAMC,UAAU,IAAI,GACvDmB,EAAUvE,SAASE,eAAiB,IAAIC,IAAQ,0BAA2B1F,EAAMC,OAIjF,IAAI8J,EAAOnK,IAAY0C,UAAU,OAAQ,CAACxC,MAAO,GAAIC,OAAQ,EAAGwC,MAAO,GAAI8D,gBAAiB/E,IAAKgF,YAAatG,EAAMC,OACpH8J,EAAK7J,SAAW,IAAIC,IAAQ,EAAE,EAAE,GAChC4J,EAAKxE,SAAW,IAAIC,IAAiB,IACrCuE,EAAKxE,SAASE,eAAiB,IAAIC,IAAQ,mBAAoB1F,EAAMC,OAErE+J,IAAYC,WAAW,GAAG,GAAG,2BAA4BjK,EAAMC,OAAO,SAASiK,GAC3EA,EAAUC,SAAQ,SAACxK,GACnBA,EAAKyK,QAAU,IAAIjK,IAAQ,GAAK,GAAK,OAMrC,IAAI0G,EAAMjH,IAAY0C,UAAU,QAAS,CAACvC,OAAQ,GAAID,MAAO,EAAGyC,MAAO,GAAIvC,EAAMC,OACjF4G,EAAIrE,WAAY,EAChBqE,EAAIrF,OAAU0I,EAAU,GACxBrD,EAAIrC,iBAAkB,KAQ1BwF,IAAYC,WAAW,GAAG,GAAG,YAAajK,EAAMC,OAAO,SAASiK,GAC5DA,EAAUC,SAAQ,SAACxK,GAEnBA,EAAKyK,QAAU,IAAIjK,IAAQ,IAAK,IAAK,KAErCR,EAAKO,SAAW,IAAIC,IAAQ,EAAE,GAAG,MAMjCZ,QAAQC,IAAI0K,EAAU,GAAGG,kBAAkBC,YAAYC,WAAWC,MAAM,IACxE,IAAI3D,EAAMjH,IAAY0C,UAAU,QAAS,CAACvC,OAAQ,EAAGD,MAAO,IAAMyC,MAAO,IAAMvC,EAAMC,OACrF4G,EAAIrE,WAAY,EAEhBqE,EAAIrF,OAAU0I,EAAU,GACxBrD,EAAIrC,iBAAkB,KAI1BwF,IAAYC,WAAW,GAAG,GAAG,WAAYjK,EAAMC,OAAO,SAASiK,GAC3DA,EAAUC,SAAQ,SAACxK,GAEnBA,EAAKyK,QAAU,IAAIjK,IAAQ,IAAK,IAAK,KAErCR,EAAKO,SAAW,IAAIC,IAAQ,GAAG,GAAG,OAQlC,IAAI0G,EAAMjH,IAAY0C,UAAU,QAAS,CAACvC,OAAQ,EAAGD,MAAO,IAAKyC,MAAO,GAAIvC,EAAMC,OAClF4G,EAAIrE,WAAY,EAEhBqE,EAAIrF,OAAU0I,EAAU,GACxBrD,EAAIrC,iBAAkB,KAM1B,IAAIiG,EAAU7K,IAAYC,YAAY,SAAU,CAACE,OAAO,GAAKD,MAAO,GAAIE,EAAMC,OAC9EwK,EAAQvK,SAAW,IAAIC,KAAS,IAAI,KAAK,KACzCsK,EAAQlF,SAAW,IAAIC,IAAiB,GAAIxF,EAAMC,OAClDwK,EAAQlF,SAASuB,aAAe,IAAIN,IAAOC,KAE3CgE,EAAQvB,cAAgB,IAAIC,IAAcnJ,EAAMC,OAChDwK,EAAQvB,cAAcE,eAClB,IAAIC,IACA,CACIC,QAASH,IAAcI,gBAG3B,WAAcvJ,EAAMC,MAAMsE,cAAgBvE,EAAMmE,OAASnE,EAAM0K,WAAW,GAAK1K,EAAM4H,kBAM7F,IAAI+C,EAAU/K,IAAYC,YAAY,SAAU,CAACE,OAAO,GAAKD,MAAO,GAAIE,EAAMC,OAC9E0K,EAAQzK,SAAW,IAAIC,KAAS,IAAI,EAAE,KACtCwK,EAAQpF,SAAW,IAAIC,IAAiB,GAAIxF,EAAMC,OAClD0K,EAAQpF,SAASuB,aAAe,IAAIN,IAAOE,MAG3CiE,EAAQzB,cAAgB,IAAIC,IAAcnJ,EAAMC,OAChD0K,EAAQzB,cAAcE,eAClB,IAAIC,IACA,CACIC,QAASH,IAAcI,gBAG3B,WAAcvJ,EAAMC,MAAMsE,cAAgBvE,EAAMmE,OAASnE,EAAM0K,WAAW,GAAK1K,EAAM4H,kBAI7F,IAAIgD,EAAUhL,IAAYC,YAAY,SAAU,CAACE,OAAO,GAAKD,MAAO,GAAIE,EAAMC,OAC9E2K,EAAQ1K,SAAW,IAAIC,KAAS,IAAI,IAAK,KACzCyK,EAAQrF,SAAW,IAAIC,IAAiB,GAAIxF,EAAMC,OAClD2K,EAAQrF,SAASuB,aAAe,IAAIN,IAAOG,IAE3CiE,EAAQ1B,cAAgB,IAAIC,IAAcnJ,EAAMC,OAChD2K,EAAQ1B,cAAcE,eAClB,IAAIC,IACA,CACIC,QAASH,IAAcI,gBAG3B,WAAcvJ,EAAMC,MAAMsE,cAAgBvE,EAAMmE,OAASnE,EAAM0K,WAAW,GAAK1K,EAAM4H,kBAI7F,IAAIiD,EAAUjL,IAAYC,YAAY,SAAU,CAACE,OAAO,GAAKD,MAAO,GAAIE,EAAMC,OAC9E4K,EAAQ3K,SAAW,IAAIC,KAAS,IAAI,IAAK,KACzC0K,EAAQtF,SAAW,IAAIC,IAAiB,GAAIxF,EAAMC,OAClD4K,EAAQtF,SAASuB,aAAe,IAAIN,IAAOI,OAE3CiE,EAAQ3B,cAAgB,IAAIC,IAAcnJ,EAAMC,OAChD4K,EAAQ3B,cAAcE,eAClB,IAAIC,IACA,CACIC,QAASH,IAAcI,gBAG3B,WAAcvJ,EAAMC,MAAMsE,cAAgBvE,EAAMmE,OAASnE,EAAM0K,WAAW,GAAK1K,EAAM4H,oB,oCAkDhF,IAAIkD,IAAiB,OAAQ,IAAI3K,KAAS,EAAE,EAAE,IAAKH,EAAMC,OACzD,IAAI8K,IAAW,OAAQ,IAAI5K,KAAS,EAAE,EAAE,IAAKH,EAAMC,W,KAgBxED,EAAMgL,eAAiB,I,aCvhBFC,E,WAEjB,WAAYC,EAAI5L,GAAW,oBAEvBG,KAAKyL,GAAKA,EACVzL,KAAKE,KAAOC,IAAY0C,UAAU,SAAU,CAACvC,OAFhC,EAEgDD,MAAO,EAAGyC,MAAO,GAAIvC,EAAMC,OACxFR,KAAKE,KAAKO,SAAWC,IAAQC,OAC7BX,KAAKE,KAAKO,SAASuC,EAAI,EACvBhD,KAAKE,KAAKO,SAASG,EAAIN,IACvBN,KAAKE,KAAKO,SAASwC,EAAI,EACvBjD,KAAKE,KAAK4F,SAAW0F,EAAO1F,SAC5B9F,KAAK0L,UAAY,IAAIC,EAAU3L,KAAKE,KAAML,GAC1C2L,EAAOI,IAAIxG,KAAKpF,M,sDAKhBA,KAAK0L,UAAUxL,KAAKkI,UACpBpI,KAAKE,KAAKkI,Y,gCA8CJpF,EAAGpC,EAAGqC,EAAGC,GACflD,KAAKE,KAAKO,SAASuC,EAAIA,EACvBhD,KAAKE,KAAKO,SAASG,EAAIA,EACvBZ,KAAKE,KAAKO,SAASwC,EAAIA,EACvBjD,KAAKE,KAAK2L,mBAAqBC,IAAWC,gBAAgB,GAAI7I,EAAU,M,4BA9ChE8I,EAAUnM,GAAU,oBAEN2L,EAAOI,KAFD,IAE5B,2BAAkC,CAAC,IAA1BK,EAAyB,QAC9B,GAAIA,EAAUR,KAAOO,EAEjB,OAAOC,GALa,8BAU5B,OADAnM,QAAQC,IAAIiM,EAAUnM,GACf,IAAI2L,EAAOQ,EAAUnM,K,6BAI5B2L,EAAO1F,SAAW,IAAIC,IAAiB,YAAaxF,EAAMC,OAC1DgL,EAAO1F,SAASuB,aAAe,IAAIN,IAAOG,M,2BAIlCgF,GAER,IAAIF,EAAWG,SAASD,EAAKT,IACbD,EAAOY,KAAKJ,EAAUE,EAAKrM,UACjCwM,UAAUH,EAAKlJ,EAAGkJ,EAAKtL,EAAGsL,EAAKjJ,EAAGiJ,EAAKhJ,Y,6BAIvCgJ,GAAO,IAAD,gBACMV,EAAOI,KADb,IAChB,2BAAkC,CAAC,IAA1BK,EAAyB,QAC9B,GAAIA,EAAUR,KAAOS,EAAKT,GAAI,CAC1BQ,EAAUK,UACV,QAJQ,8BAShBd,EAAOI,IAAMJ,EAAOI,IAAIW,QAAO,SAACC,GAC5B,OAAOA,EAAIf,KAAOS,EAAKT,U,KAanCD,EAAOI,IAAM,IAAIa,M,sBCpEIrJ,E,oGAGTA,EAAGsJ,cAAgB,KAInBtJ,EAAGC,OAAOsJ,MAEVvJ,EAAGC,OAAOuJ,GAAG,QAAQ,SAASV,GACvBA,EAAKW,SACLzJ,EAAGsJ,cAAgBR,EAAKY,OACxBvM,EAAMwM,OACNvB,EAAOuB,OACPlM,EAAOkM,KAAKb,EAAKrM,UACjBmC,EAAM+K,QAKLjN,QAAQC,IAAI,8BAKpBqD,EAAGC,OAAOuJ,GAAG,aAAa,SAASV,GAE/B,OADApM,QAAQC,IAAImM,GACLA,EAAK3I,SACZ,IAAK,aACDiI,EAAOwB,OAAOd,GACd,MACJ,IAAK,cACDV,EAAOyB,KAAKf,S,4BAsBbrM,EAAUiN,GAClB1J,EAAGC,OAAOC,KAAK,QAAS,CAACzD,SAAUA,EAAUiN,OAAQA,Q,KC/CjDI,EAbD,SAACC,GAAW,IAAD,EACQC,mBAAS,IADjB,mBACjBC,EADiB,KACPC,EADO,KAGxB,OACA,gCACC,yCACM,8CAAuB,uBAAOC,SAAU,SAAAlL,GAAC,OAAIiL,EAAYjL,EAAEmL,OAAOC,QAAQC,KAAK,OAAOjC,GAAG,aACzF,wBAAQA,GAAG,QAAQkC,QAAS,kBAAMvK,EAAGwK,MAAMP,EAAUF,EAAML,SAA3D,SAAqEK,EAAML,OAAS,aAAe,qB,mCCA3G1J,EAAG2J,OAGH,IAAMc,EAAW,SAACV,GACd,IAAMW,EAAMC,mBAQZ,OANAC,qBAAU,WACNb,EAAMc,KAAKrB,GAAG,UAAU,SAAAsB,GACpBJ,EAAIK,QAAQC,UAAYF,OAE7B,IAGC,uBAAOG,UAAQ,EAACP,IAAKA,KAgGdQ,EA3FF,SAACnB,GAAW,IAAD,EACIC,mBAAS,IADb,mBACfmB,EADe,KACRC,EADQ,KAEhBC,EAAYV,mBAEZW,GADYX,mBACDA,iBAAO,KAEhBjB,EAAW6B,cAAX7B,OAqER,OAhECkB,qBAAU,WACLS,EAAUN,QAAU/K,EAAGC,OACvBuL,UAAUC,aAAaC,aAAa,CAACC,OAAO,IAAQC,MAAK,SAAAd,GAGrDO,EAAUN,QAAQvB,GAAG,aAAa,SAAAqC,GAC9B,IAAMV,EAAQ,GACdU,EAAMvE,SAAQ,SAAAwE,GACV,IAAMjB,EA2BtB,SAAoBkB,EAAcC,EAAUlB,GACxC,IAAMD,EAAO,IAAIoB,IAAK,CAClBC,WAAW,EACXC,SAAS,EACTrB,WAOJ,OAJAD,EAAKrB,GAAG,UAAU,SAAA4C,GACdf,EAAUN,QAAQ7K,KAAK,iBAAkB,CAAE6L,eAAcC,WAAUI,cAGhEvB,EAtCkBwB,CAAWP,EAAQT,EAAUN,QAAQ1C,GAAIyC,GACtDQ,EAASP,QAAQ/I,KAAK,CAClBsK,OAAQR,EACRjB,SAEJM,EAAMnJ,KAAK6I,MAEfO,EAASD,MAGbE,EAAUN,QAAQvB,GAAG,eAAe,SAAA+C,GAChC,IAAM1B,EA8BlB,SAAiB2B,EAAgBR,EAAUlB,GACvC,IAAMD,EAAO,IAAIoB,IAAK,CAClBC,WAAW,EACXC,SAAS,EACTrB,WAQJ,OALAD,EAAKrB,GAAG,UAAU,SAAA4C,GACdf,EAAUN,QAAQ7K,KAAK,mBAAoB,CAAEkM,SAAQJ,gBAEzDnB,EAAKuB,OAAOI,GAEL3B,EA1Cc4B,CAAQF,EAAQH,OAAQG,EAAQP,SAAUlB,GACvDQ,EAASP,QAAQ/I,KAAK,CAClBsK,OAAQC,EAAQP,SAChBnB,SAGJO,GAAS,SAAAS,GAAK,4BAAQA,GAAR,CAAehB,UAGjCQ,EAAUN,QAAQvB,GAAG,6BAA6B,SAAA+C,GACjCjB,EAASP,QAAQ/B,MAAK,SAAA0D,GAAC,OAAIA,EAAEJ,SAAWC,EAAQlE,MACxDwC,KAAKuB,OAAOG,EAAQH,gBAGlC,IAgCH,gCAEI,cAAC,EAAD,CAAO1C,OAAQA,IACdyB,EAAMwB,KAAI,SAAC9B,EAAM+B,GACV,OACI,cAAC,EAAD,CAAsB/B,KAAMA,GAAb+B,MAG3B,4BAAI5M,EAAGsJ,gBACP,wBAAQjB,GAAG,SAASwE,MAAO,CAAC,MAAS,OAAQ,OAAU,c,SCnGhDC,EAXH,WAEX,OACG,cAAC,IAAD,UACI,cAAC,IAAD,UACE,cAAC,IAAD,CAAO1J,KAAK,YAAY2J,SAAU,cAAC,EAAD,WCG7BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASpM,OACP,cAAC,IAAMqM,WAAP,UACE,cAAC,EAAD,MAEFjN,SAASC,eAAe,SAM1BuM,M","file":"static/js/main.c24ffaa5.chunk.js","sourcesContent":["import Avatar from './Avatar'\nimport World from './World'\nimport {MeshBuilder, Vector3, Mesh} from '@babylonjs/core';\nimport * as GUI from '@babylonjs/gui'\n\n\n\nexport default class Billboard {\n\n    constructor(playerMesh, username) {\n        console.log(username)\n\n        this.playerMesh = playerMesh;\n        this.username = username;\n        this.create();\n    }\n    \n    create() {\n        this.mesh = MeshBuilder.CreatePlane(\"billboard\", {width: Billboard.width, height: Billboard.height}, World.scene);\n        this.mesh.position = Vector3.Zero();\n        this.mesh.position.y = Avatar.height - Billboard.height;\n        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(this.mesh, 1024, 256);\n        advancedTexture.name = \"AvatarBillboard\";\n        var containerUI = new GUI.Rectangle(\"container\");\n        containerUI.thickness = 0;\n        containerUI.height = \"100px\";\n        containerUI.width = \"800px\";\n        advancedTexture.addControl(containerUI);\n        this.text = new GUI.TextBlock();\n        this.text.fontFamily = \"Arial\";\n        this.text.fontWeight = \"bold\";\n        this.text.color = \"white\";\n        this.text.outlineColor = \"black\";\n        this.text.outlineWidth = 40;\n        this.text.fontSize = 100;\n        containerUI.addControl(this.text);\n        this.text.text = this.username;\n        this.mesh.billboardMode = Mesh.BILLBOARDMODE_ALL;\n        this.mesh.parent = this.playerMesh;\n    }\n}\n\nBillboard.height = 1;\nBillboard.width = 3;","export default class Input {\n    \n    static init() {\n        window.addEventListener(\"keydown\", this.keydownEvent);\n        window.addEventListener(\"keyup\", this.keyupEvent);\n        window.addEventListener(\"blur\", this.keyupEvent);\n    }\n\n    static keydownEvent(e) {\n        switch (e.keyCode) {\n            case 38: //UP\n            case 87: //W\n                 e.preventDefault()\n                Input.key.up = true;\n                break;\n            case 37: //LEFT\n            case 65: //A\n                Input.key.left = true;\n                break;\n            case 39: //RIGHT\n            case 68: //D\n                Input.key.right = true;\n                break;\n            case 40: //DOWN\n            case 83: //S\n                Input.key.down = true;\n                break;\n        }\n    }\n    \n    static keyupEvent(e) {\n        switch (e.keyCode) {\n            case 38: //UP\n            case 87: //W\n                e.preventDefault()\n                Input.key.up = false;\n                break;\n            case 37: //LEFT\n            case 65: //A\n                Input.key.left = false;\n                break;\n            case 39: //RIGHT\n            case 68: //D\n                Input.key.right = false;\n                break;\n            case 40: //DOWN\n            case 83: //S\n                Input.key.down = false;\n                break;\n        }\n    }\n}\n\nInput.key = {\n    down:false,\n    up:false,\n    left:false,\n    right:false\n};","import BillBoard from './BillBoard'\nimport IO from './IO'\nimport { Vector3, StandardMaterial, MeshBuilder, Axis, Space, Color3} from '@babylonjs/core';\nimport Input from './Input'\nimport World from './World'\n\n\n\n\nexport default class Avatar {\n    \n    static init(username) {\n        Avatar.mesh = MeshBuilder.CreateBox(\"avatar\", {height: Avatar.height, width: 1, depth: 1}, World.scene);\n        Avatar.mesh.position = Vector3.Zero();\n        Avatar.mesh.position.y = Avatar.height/2;\n        Avatar.mesh.isVisible = false\n        //Avatar.mesh.material = new StandardMaterial(\"matAvatar\", World.scene);\n        //Avatar.mesh.material.diffuseColor = new Color3.Green();\n        Avatar.username = username;\n        //new BillBoard(Avatar.mesh, Avatar.username);\n    }   \n    \n    /*static rotate(isLeft) {\n        //Turning left\n        if (isLeft) {\n            Avatar.absoluteRotation -= Avatar.rotationSpeed;\n            Avatar.mesh.rotate(Axis.Y, Avatar.rotationSpeed, Space.WORLD);\n        //Turning right\n        } else {\n            Avatar.absoluteRotation += Avatar.rotationSpeed;            \n            Avatar.mesh.rotate(Axis.Y, -Avatar.rotationSpeed, Space.WORLD);\n        }\n    }*/\n    \n    static send() {\n        var x = Avatar.mesh.position.x;\n        var y = Avatar.mesh.position.y;\n        var z = Avatar.mesh.position.z;\n        var rotation = Avatar.absoluteRotation;\n        IO.socket.emit('transform', {command: \"playerMoved\",  x, y, z, rotation})\n    }   \n    \n    static update(position) {\n        if (Avatar.mesh !== null) {\n            Avatar.mesh.position = position\n            Avatar.send();\n\n\n            //Moving forward\n            /*if (Input.key.up) {\n        \t\tconst forward = new Vector3(Avatar.walkSpeed * Math.cos(Avatar.absoluteRotation), 0, Avatar.walkSpeed * Math.sin(Avatar.absoluteRotation));\n                Avatar.mesh.moveWithCollisions(forward);\n\n                Avatar.send();\n\n            } else if(Input.key.down){\n                const backward = new Vector3(Avatar.walkSpeed * ( -1 * Math.cos(Avatar.absoluteRotation)), 0, Avatar.walkSpeed * ( -1 * Math.sin(Avatar.absoluteRotation)));\n\n                Avatar.mesh.moveWithCollisions(backward);\n                Avatar.send();\n            }\n            //Turning left\n            if (Input.key.left) {\n                Avatar.rotate(false);\n                Avatar.send();\n            //Turning right\n            } else if (Input.key.right) {\n                Avatar.rotate(true);\n                Avatar.send();\n            }*/\n        }\n    }\n}\n\nAvatar.absoluteRotation = 0;\nAvatar.height = 3;\nAvatar.mesh = null;\nAvatar.rotationSpeed = 0.01;\nAvatar.walkSpeed = 0.007;","import Avatar from './Avatar'\n//import Chat from './Chat'\nimport '@babylonjs/loaders';\nimport 'babylonjs-loaders';\n//import BoomBox from './BoomBox'\nimport * as GUI from '@babylonjs/gui'\nimport {Vector4,ExecuteCodeAction,SetValueAction,InterpolateValueAction,SceneLoader, FreeCamera,ArcRotateCamera, ActionManager, UniversalCamera,Color3, Vector3, StandardMaterial,HemisphericLight,DirectionalLight,PointLight, Texture, MeshBuilder, Engine, Scene, Mesh, Tools} from '@babylonjs/core';\n\n\nexport default class World {\n    static init() {\n        World.canvas = document.getElementById(\"canvas\");\n        var engine = new Engine(World.canvas, true);\n\n        \n        World.scene = new Scene(engine);\n        World.scene.gravity = new Vector3(0, -0.9, 0);\n        World.scene.collisionsEnabled = true;\n\n\n\n        World.setupCamera();        \n        World.setupLights();\n        World.setupGround();\n        World.setupWalls();\n        //Chat.init()\n\n        engine.runRenderLoop(() => {\n            World.scene.render();\n            Avatar.update(World.camera.position);\n            //World.updateCamera();\n        });        \n        \n        //Resize event\n        window.addEventListener(\"resize\", () => {\n            engine.resize();\n        });\n    }\n    \n    static setupCamera() {\n        /*World.camera = new FreeCamera(\"firstPersonCam\", Vector3.Zero(), World.scene);\n        World.camera.ellipsoid = new Vector3(0.1, 0.1, 0.1);\n        World.camera.checkCollisions = true;\n        World.camera.speed = 0.1\n        World.camera.applyGravity = true;\n\n        //World.camera.position.x -= Math.sin(-Math.PI/2) * -1 * World.cameraDistance;\n        World.camera.position.y = 0.7;\n        World.camera.attachControl(World.canvas, true)\n        //World.camera.position.z -= Math.cos(-Math.PI/2) * -1 * World.cameraDistance;\n        //var lookAt = Vector3.Zero();\n        //lookAt.y = Avatar.height + Avatar.height/2;\n        //World.camera.setTarget(lookAt);*/\n        World.camera = new FreeCamera(\"FreeCamera\", new Vector3(-5,2,-5), World.scene);\n        World.camera.attachControl(World.canvas, true);\n        //World.scene.activeCameras.push(World.camera);\n        World.scene.activeCamera = World.camera\n        World.camera.checkCollisions = true;\n        World.camera.applyGravity = true;\n        World.camera.ellipsoid = new Vector3(1.0, 0.66, 1.0);\n        World.camera.speed = 0.1\n        World.camera.keysUp.push(87);\n        World.camera.keysDown.push(83)\n        World.camera.keysRight.push(68)\n        World.camera.keysLeft.push(65)\n\n        World.arcCamera = new ArcRotateCamera(\"ArcCamera\", 3 * Math.PI / 2, 3 * Math.PI / 8, 3, new Vector3(0, 0, 0), World.scene);\n        World.arcCamera.layerMask = 0x10000000;\n    }\n    \n    static setupGround() {\n        /*var ground = MeshBuilder.CreateGround(\"ground\", {height: 3, width: 3, subdivisions: 4}, World.scene);\n        ground.checkCollisions = true;\n        ground.position = Vector3.Zero();\n        ground.material = new StandardMaterial(\"matGround\", World.scene);\n        ground.material.diffuseTexture = new Texture(\"ground.jpg\", World.scene);*/\n        var ground = Mesh.CreatePlane(\"ground\", 20.0, World.scene);\n        ground.material = new StandardMaterial(\"groundMat\", World.scene);\n        ground.material.diffuseTexture = new Texture(\"wood_floor_texture.jpg\", World.scene);\n        ground.position = new Vector3(0,0,0);\n        ground.rotation = new Vector3(Math.PI / 2, 0, 0);\n        ground.checkCollisions = true;\n\n    }\n\n\n    static openDrawer(drawerNumber){\n        var boxSize = 1;\n        var myPath = [\n                 new Vector3(0, 0.0, 0),\n                new Vector3(0, boxSize/2, 0)\n        ];\n        var currentDrawer = MeshBuilder.CreateTube(\"currentDrawer\", {path: myPath, tessellation:4, cap: 1, radius: boxSize, sideOrientation: Mesh.DOUBLESIDE, updatable: true}, World.scene);\n        currentDrawer.material = new StandardMaterial(\"\", World.scene);\n        currentDrawer.material.diffuseTexture = new Texture(\"desk_texture.png\", World.scene);\n        currentDrawer.layerMask = 0x10000000;\n        let boxColor\n        switch (drawerNumber) {\n          case 1:\n            boxColor =  new Color3.Blue()\n            break;\n          case 2:\n            boxColor =  new Color3.Green()\n            break;\n          case 3:\n            boxColor = new Color3.Red()\n            break;\n          case 4:\n            boxColor = new Color3.Purple()\n            break;\n\n        }\n\n        var box = MeshBuilder.CreateBox(\"clue\", {width: 0.1, height: 0.1, depth: 0.1, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        box.position.y = 0.051;\n        box.material = new StandardMaterial(\"\", World.scene);\n        box.material.diffuseColor = boxColor;\n        box.parent =  currentDrawer\n        box.layerMask = 0x10000000;\n\n\n\n\n        World.scene.activeCamera = World.arcCamera\n        World.arcCamera.attachControl(World.canvas, true);\n        var light = new HemisphericLight(\"light1\", new Vector3(1, 1, 0.5), World.scene);\n\n\n\n\n        var advancedTexture = GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n        advancedTexture.layer.layerMask = 0x10000000;\n\n        var button = GUI.Button.CreateImageButton(\"but\", \"Return\", \"\");\n        button.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\n        button.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;\n        button.width = 0.1;\n        button.height = \"40px\";\n        button.color = \"white\";\n        button.background = \"green\";\n        button.onPointerUpObservable.add(function() {\n            World.closeDrawer(currentDrawer,light)\n        });\n        advancedTexture.addControl(button);\n\n\n    }\n\n    static closeDrawer(currentDrawer,light){\n        currentDrawer.dispose();\n        World.scene.activeCamera = World.camera\n        light.dispose()\n    }\n\n\n    static openNumPad(mesh1,mesh2){\n        var advancedTexture = GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n\n        var input = new GUI.InputText();\n        input.width = 0.05;\n        input.maxWidth = 0.05;\n        input.height = \"40px\";\n        input.color = \"white\";\n        input.background = \"black\";\n        advancedTexture.addControl(input);\n\n\n        var button = GUI.Button.CreateImageButton(\"SubmitButton\", \"Submit\", \"\");\n        button.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;\n        button.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n        button.width = 0.1;\n        button.height = \"40px\";\n        button.color = \"white\";\n        button.background = \"black\";\n        /*button.onPointerUpObservable.add(function() {\n            mesh1.dispose()\n            mesh2.dispose()\n            input.dispose()\n            button.dispose()\n        });*/\n        advancedTexture.addControl(button);\n\n        var keyboard = new GUI.VirtualKeyboard();\n        keyboard.addKeysRow([\n          \"1\",\n          \"2\",\n          \"3\",\n          \"4\",\n          \"5\",\n          \"6\",\n          \"7\",\n          \"8\",\n          \"9\",\n          \"0\",\n          \"\\u2190\"\n        ]);\n        keyboard.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;\n        advancedTexture.addControl(keyboard);\n        keyboard.connect(input);\n        advancedTexture.moveFocusToControl(input)\n\n        input.onBlurObservable.add(function() {\n            if (1===1) {\n                mesh1.dispose()\n                mesh2.dispose()\n                input.dispose()\n                button.dispose()\n           }\n        });\n\n    }\n\n        static closeNumPad(){\n\n\n\n        }\n\n\n    static setupWalls(){\n        var wall1 = MeshBuilder.CreateBox(\"wall1\", {width: 20, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall1.checkCollisions = true;\n        wall1.material = new StandardMaterial(\"\"); \n        wall1.position = new Vector3(0,1,11);\n        wall1.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n\n        /*var wall2 = MeshBuilder.CreateBox(\"wall2\", {width: 20, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall2.checkCollisions = true;\n        wall2.position = new Vector3(11,1,0);\n        wall2.material = new StandardMaterial(\"\");\n        wall2.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall2.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);*/\n\n        var wall2Left = MeshBuilder.CreateBox(\"wall2Left\", {width: 8, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall2Left.checkCollisions = true;\n        wall2Left.position = new Vector3(11,1,-6);\n        wall2Left.material = new StandardMaterial(\"\");\n        wall2Left.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall2Left.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n        var wall2Right = MeshBuilder.CreateBox(\"wall2Right\", {width: 8, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall2Right.checkCollisions = true;\n        wall2Right.position = new Vector3(11,1,6);\n        wall2Right.material = new StandardMaterial(\"\");\n        wall2Right.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall2Right.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n        var wall2Arch = MeshBuilder.CreateBox(\"wall2Arch\", {width: 4, height: 4, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall2Arch.checkCollisions = true;\n        wall2Arch.position = new Vector3(11,4,0);\n        wall2Arch.material = new StandardMaterial(\"\");\n        wall2Arch.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall2Arch.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n        var wall2Base = MeshBuilder.CreateBox(\"wall2Base\", {width: 4, height: 2, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall2Base.checkCollisions = true;\n        wall2Base.position = new Vector3(11,-1,0);\n        wall2Base.material = new StandardMaterial(\"\");\n        wall2Base.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall2Base.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n\n        var safeBack = MeshBuilder.CreatePlane(\"safeBack\", {height:5, width: 4}, World.scene)\n        safeBack.position = new Vector3(12, 1, 0)\n        safeBack.material = new StandardMaterial(\"\", World.scene);\n        safeBack.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        safeBack.checkCollisions = true\n\n        var safeBackBorder = MeshBuilder.CreatePlane(\"safeBackBorder\", {height:5, width: 4}, World.scene)\n        safeBackBorder.position = new Vector3(11.5, 1, 0)\n        safeBackBorder.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        safeBackBorder.checkCollisions = true\n        safeBackBorder.isVisible = false; \n\n\n        var safeFront = MeshBuilder.CreatePlane(\"safeFront\", {height:2, width: 4}, World.scene)\n        safeFront.position = new Vector3(10, 1, 0)\n        safeFront.material = new StandardMaterial(\"\", World.scene);\n        safeFront.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        safeFront.material.diffuseTexture = new Texture(\"safe_texture.png\", World.scene);\n        safeBack.checkCollisions = true\n\n        safeFront.actionManager = new ActionManager(World.scene);\n        safeFront.actionManager.registerAction(\n            new ExecuteCodeAction(\n                {\n                    trigger: ActionManager.OnPickTrigger\n                    //parameter: 'r'\n                },\n                function () { World.openNumPad(safeFront, safeFrontBorder)}\n            )\n        );\n\n\n\n        var safeFrontBorder = MeshBuilder.CreatePlane(\"safeFrontBorder\", {height:2, width: 4}, World.scene)\n        safeFrontBorder.position = new Vector3(9.5, 1, 0);\n        safeFrontBorder.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        safeFrontBorder.checkCollisions = true;\n        safeFrontBorder.isVisible = false; \n\n\n\n\n\n        var wall3 = MeshBuilder.CreateBox(\"wall3\", {width: 20, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall3.checkCollisions = true;\n        wall3.material = new StandardMaterial(\"\"); \n        wall3.position = new Vector3(0,1,-11);\n        wall3.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n\n        var wall4Left = MeshBuilder.CreateBox(\"wall4Left\", {width: 8, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall4Left.checkCollisions = true;\n        wall4Left.position = new Vector3(-11,1,-6);\n        wall4Left.material = new StandardMaterial(\"\");\n        wall4Left.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall4Left.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n        var wall4Right = MeshBuilder.CreateBox(\"wall4Right\", {width: 8, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall4Right.checkCollisions = true;\n        wall4Right.position = new Vector3(-11,1,6);\n        wall4Right.material = new StandardMaterial(\"\");\n        wall4Right.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall4Right.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n        var wall4Arch = MeshBuilder.CreateBox(\"wall4Arch\", {width: 4, height: 2, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall4Arch.checkCollisions = true;\n        wall4Arch.position = new Vector3(-11,5,0);\n        wall4Arch.material = new StandardMaterial(\"\");\n        wall4Arch.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall4Arch.material.diffuseTexture = new Texture(\"office_wall_texture.jpg\", World.scene);\n\n        var wall4Door = MeshBuilder.CreateBox(\"wall4Door\", {width: 4, height: 4, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall4Door.checkCollisions = true;\n        wall4Door.position = new Vector3(-11,2,0);\n        wall4Door.material = new StandardMaterial(\"\");\n        wall4Door.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall4Door.material.diffuseTexture = new Texture(\"double_door_texture.jpg\", World.scene);\n\n\n\n        var roof = MeshBuilder.CreateBox(\"roof\", {width: 20, height: 2, depth: 20, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        roof.position = new Vector3(0,7,0);\n        roof.material = new StandardMaterial(\"\");\n        roof.material.diffuseTexture = new Texture(\"wall_texture.jpg\", World.scene);\n\n        SceneLoader.ImportMesh(\"\",\"\",\"plant_with_color.babylon\", World.scene, function(newMeshes){\n            newMeshes.forEach((mesh) => {\n            mesh.scaling = new Vector3(0.4, 0.4, 0.4);\n            //mesh.checkCollisions = true;\n            //console.log(mesh)\n            //mesh.showBoundingBox = true\n            })\n            //console.log(newMeshes[1].getBoundingInfo().boundingBox.extendSize.scale(2))\n            var box = MeshBuilder.CreateBox(\"myBox\", {height: 13, width: 3, depth: 3}, World.scene);\n            box.isVisible = false;    \n            box.parent =  newMeshes[1];\n            box.checkCollisions = true;\n\n\n\n    \n            //do nothing\n        })\n\n        SceneLoader.ImportMesh(\"\",\"\",\"chair.glb\", World.scene, function(newMeshes){\n            newMeshes.forEach((mesh) => {\n            //mesh.scaling = new Vector3(10, 10, 10);\n            mesh.scaling = new Vector3(1.5, 1.5, 1.5);\n\n            mesh.position = new Vector3(6,0,-5)\n            //mesh.checkCollisions = true;\n            //mesh.showBoundingBox = true\n\n            })\n            //newMeshes[1].checkCollisions = true;\n            console.log(newMeshes[1].getBoundingInfo().boundingBox.extendSize.scale(2))\n            var box = MeshBuilder.CreateBox(\"myBox\", {height: 2, width: 0.55, depth: 0.7}, World.scene);\n            box.isVisible = false;    \n            //box.setPositionWithLocalVector(new Vector3(0, 1, 0))\n            box.parent =  newMeshes[1];\n            box.checkCollisions = true;\n            //do nothing\n        })\n\n        SceneLoader.ImportMesh(\"\",\"\",\"desk.glb\", World.scene, function(newMeshes){\n            newMeshes.forEach((mesh) => {\n            //mesh.scaling = new Vector3(10, 10, 10);\n            mesh.scaling = new Vector3(1.5, 1.5, 1.5);\n\n            mesh.position = new Vector3(10,0,-10)\n\n            //mesh.checkCollisions = true;\n            //console.log(newMeshes[1].getBoundingInfo().boundingBox.extendSize.scale(2))\n            //mesh.showBoundingBox = true\n            //console.log(mesh)\n            })\n\n            var box = MeshBuilder.CreateBox(\"myBox\", {height: 2, width: 1.5, depth: 1}, World.scene);\n            box.isVisible = false;    \n            //box.setPositionWithLocalVector(new Vector3(0, 1, 0))\n            box.parent =  newMeshes[1];\n            box.checkCollisions = true;\n\n         })\n\n\n\n        var drawer1 = MeshBuilder.CreatePlane(\"plane1\", {height:0.3, width: 1}, World.scene)\n        drawer1.position = new Vector3(-5.8,1.34,4.3)\n        drawer1.material = new StandardMaterial(\"\", World.scene);\n        drawer1.material.diffuseColor = new Color3.Blue();\n\n        drawer1.actionManager = new ActionManager(World.scene);\n        drawer1.actionManager.registerAction(\n            new ExecuteCodeAction(\n                {\n                    trigger: ActionManager.OnPickTrigger\n                    //parameter: 'r'\n                },\n                function () { World.scene.activeCamera == World.camera ? World.openDrawer(1) : World.closeDrawer()}\n            )\n        );\n\n  \n\n        var drawer2 = MeshBuilder.CreatePlane(\"plane2\", {height:0.3, width: 1}, World.scene)\n        drawer2.position = new Vector3(-5.8,1,4.3)\n        drawer2.material = new StandardMaterial(\"\", World.scene);\n        drawer2.material.diffuseColor = new Color3.Green(); \n\n\n        drawer2.actionManager = new ActionManager(World.scene);\n        drawer2.actionManager.registerAction(\n            new ExecuteCodeAction(\n                {\n                    trigger: ActionManager.OnPickTrigger\n                    //parameter: 'r'\n                },\n                function () { World.scene.activeCamera == World.camera ? World.openDrawer(2) : World.closeDrawer()}\n            )\n        );\n\n        var drawer3 = MeshBuilder.CreatePlane(\"plane3\", {height:0.3, width: 1}, World.scene)\n        drawer3.position = new Vector3(-5.8,0.66,4.3)\n        drawer3.material = new StandardMaterial(\"\", World.scene);\n        drawer3.material.diffuseColor = new Color3.Red();\n\n        drawer3.actionManager = new ActionManager(World.scene);\n        drawer3.actionManager.registerAction(\n            new ExecuteCodeAction(\n                {\n                    trigger: ActionManager.OnPickTrigger\n                    //parameter: 'r'\n                },\n                function () { World.scene.activeCamera == World.camera ? World.openDrawer(3) : World.closeDrawer()}\n            )\n        );\n\n        var drawer4 = MeshBuilder.CreatePlane(\"plane4\", {height:0.3, width: 1}, World.scene)\n        drawer4.position = new Vector3(-5.8,0.32,4.3)\n        drawer4.material = new StandardMaterial(\"\", World.scene);\n        drawer4.material.diffuseColor = new Color3.Purple();\n\n        drawer4.actionManager = new ActionManager(World.scene);\n        drawer4.actionManager.registerAction(\n            new ExecuteCodeAction(\n                {\n                    trigger: ActionManager.OnPickTrigger\n                    //parameter: 'r'\n                },\n                function () { World.scene.activeCamera == World.camera ? World.openDrawer(4) : World.closeDrawer()}\n            )\n        );         \n   \n\n\n\n\n      /*drawer1.actionManager.registerAction(\n            new InterpolateValueAction(\n                ActionManager.OnPickTrigger,\n                wall4Door,\n                'visibility',\n                0\n            )).then(\n            new InterpolateValueAction(\n                ActionManager.OnPickTrigger,\n                wall4Door,\n                'visibility',\n                1.0\n            )\n       )*/\n\n\n\n\n        /*var box = Mesh.CreateBox(\"crate\", 2, World.scene);\n        box.material = new StandardMaterial(\"Mat\", World.scene);\n        box.position = new Vector3(0,1,5);\n        box.checkCollisions = true;\n        box.actionManager = new ActionManager(World.scene);\n        box.actionManager.registerAction(\n            new InterpolateValueAction(\n                ActionManager.OnPickTrigger,\n                wall4Door,\n                'visibility',\n                0\n            )).then(\n            new InterpolateValueAction(\n                ActionManager.OnPickTrigger,\n                wall4Door,\n                'visibility',\n                1.0\n            )\n       )*/\n\n    }\n    \n    static setupLights() {\n        //light.intensity = 0.5;\n        var light0 = new DirectionalLight(\"Omni\", new Vector3(-7,5,17), World.scene);\n        var light1 = new PointLight(\"Omni\", new Vector3(-3,5,13), World.scene);        \n    }\n    \n    /*static updateCamera() {\n        if (typeof Avatar.mesh !== \"undefined\" && typeof World.camera !== \"undefined\" && Avatar.mesh !== null) {\n            World.camera.position.x = Avatar.mesh.position.x;\n            World.camera.position.y = Avatar.mesh.position.y + Avatar.height;\n            World.camera.position.z = Avatar.mesh.position.z;\n            World.camera.position.z -= Math.sin(Avatar.absoluteRotation - Math.PI) * -1 * World.cameraDistance;\n            World.camera.position.x -= Math.cos(Avatar.absoluteRotation - Math.PI) * -1 * World.cameraDistance;\n            var lookAt = new Vector3(Avatar.mesh.position.x, Avatar.mesh.position.y + Avatar.height, Avatar.mesh.position.z);\n            World.camera.setTarget(lookAt);\n        }\n    }*/\n}\n\nWorld.cameraDistance = 1.5;","import World from './World'\nimport {MeshBuilder, Vector3, StandardMaterial, Color3, Quaternion} from '@babylonjs/core';\nimport BillBoard from './BillBoard'\n\n\nexport default class Player {\n    \n    constructor(id, username) {\n        var height = 3;\n        this.id = id;\n        this.mesh = MeshBuilder.CreateBox(\"avatar\", {height: height, width: 1, depth: 1}, World.scene);\n        this.mesh.position = Vector3.Zero();\n        this.mesh.position.x = 0;\n        this.mesh.position.y = height/2;\n        this.mesh.position.z = 0;\n        this.mesh.material = Player.material;\n        this.billboard = new BillBoard(this.mesh, username);\n        Player.all.push(this);\n    }\n    \n    //Destroy player meshes\n    destroy() {\n        this.billboard.mesh.dispose();\n        this.mesh.dispose();\n    }\n    \n    //Find existing player or create if not exists\n    static find(playerID, username) {       \n        //Check if player is in our list\n        for (var objPlayer of Player.all) {\n            if (objPlayer.id === playerID) {\n                //Found player, so lets return it\n                return(objPlayer);\n            }\n        };                \n        //Player doesn't exist, so lets create a new one\n        console.log(playerID, username)\n        return(new Player(playerID, username));\n    }\n    \n    static init() {\n        Player.material = new StandardMaterial(\"matPlayer\", World.scene);\n        Player.material.diffuseColor = new Color3.Red();        \n    }\n    \n    //Find player and move them\n    static move(data) {\n   \n        var playerID = parseInt(data.id);\n        var objPlayer = Player.find(playerID, data.username);\n        objPlayer.transform(data.x, data.y, data.z, data.rotation);\n    }\n    \n    //Remove player from world\n    static remove(data) {\n        for (var objPlayer of Player.all) {\n            if (objPlayer.id === data.id) {\n                objPlayer.destroy();\n                break;\n            }\n        }\n        \n        //Remove me from list of all players\n        Player.all = Player.all.filter((obj) => {\n            return obj.id !== data.id;\n        });\n    }\n    \n    //Change position and rotation\n    transform(x, y, z, rotation) {\n        this.mesh.position.x = x;\n        this.mesh.position.y = y;\n        this.mesh.position.z = z;\n        this.mesh.rotationQuaternion = Quaternion.FromEulerAngles(0, -rotation, 0);\n    }\n}\n\nPlayer.all = new Array();","import World from './World'\nimport Avatar from './Avatar'\nimport Player from './Player'\nimport Input from './Input'\nimport io from \"socket.io-client\"\nimport { useHistory } from \"react-router-dom\";\n\n\n\nexport default class IO {\n    \n    static init() {\n            IO.currentRoomId = null\n\n            //IO.socket = io(\"http://localhost:3001/\", {reconnectionDelayMax: 10000})\n\n            IO.socket=io()\n\n            IO.socket.on(\"auth\", function(data){\n                if(data.success){\n                   IO.currentRoomId = data.roomId\n                   World.init()\n                   Player.init()\n                   Avatar.init(data.username);\n                   Input.init();\n                    //Avatar.send();\n                }\n\n                else {\n                    console.log(\"THAT ROOM DOESN'T EXIST\")\n\n                }\n            })\n\n            IO.socket.on(\"transform\", function(data){\n                console.log(data)\n                switch(data.command) {\n                case \"playerGone\":\n                    Player.remove(data);\n                    break;\n                case \"playerMoved\":\n                    Player.move(data);\n                    break;\n                }\n            })\n\n            /*IO.socket.on(\"all users\", users => {\n                const peers = [];\n                users.forEach(userID => {\n                    const peer = createPeer(userID, socketRef.current.id, stream);\n                    peersRef.current.push({\n                        peerID: userID,\n                        peer,\n                    })\n                    peers.push(peer);\n                })\n                setPeers(peers);\n            })*/\n\n\n\n        }\n\n     static login (username, roomId) {\n           IO.socket.emit('login', {username: username, roomId: roomId})\n     }\n\n}\n\n        /*Socket.ws.onmessage = (msg) => {\n            switch(msg.data) {\n                case \"playerGone\":\n                    Player.remove(json.data);\n                    break;\n                case \"playerMoved\":\n                    Player.move(json.data);\n                    break;\n            }\n        };*/\n\n        /*Socket.ws.onclose = () => {\n            alert(\"Connection closed\");\n        };\n        Socket.ws.onerror = (e) => {\n            console.log(\"Error\");\n        };\n    }*/\n\n\n","import React, { useState } from \"react\";\nimport IO from './IO'\n\n\nconst Login = (props) => {\n\tconst [userName, setUsername] = useState('')\n\n\treturn(\n\t<div>\n\t\t<h1>Welcome</h1>\n        <span>Username: </span><input onChange={e => setUsername(e.target.value)} type=\"text\" id=\"username\"/>\n        <button id=\"login\" onClick={() => IO.login(userName, props.roomId)}>{props.roomId ? \"Join Group\" : \"Create Group\"}</button>\n\t</div>\n\t)\n\n}\n\nexport default Login","import React, { useEffect, useRef, useState } from \"react\";\nimport IO from './IO'\nimport Login from './Login'\nimport './App.css';\nimport Peer from \"simple-peer\";\nimport { useParams } from \"react-router\";\n\n\n\n\n\nIO.init()\n\n\nconst AudioTag = (props) => {\n    const ref = useRef();\n\n    useEffect(() => {\n        props.peer.on(\"stream\", stream => {\n            ref.current.srcObject = stream;\n        })\n    }, []);\n\n    return (\n        <audio autoPlay ref={ref} />\n    );\n}\n\n\nconst Play = (props) => {\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userAudio = useRef();\n  const peersRef = useRef([]);\n  \n  const { roomId } = useParams();\n\n  \n  //const roomID = \"1\";\n\n   useEffect(() => {\n        socketRef.current = IO.socket\n        navigator.mediaDevices.getUserMedia({audio: true }).then(stream => {\n            //userAudio.current.srcObject = stream;\n            //socketRef.current.emit(\"join room\", roomID);\n            socketRef.current.on(\"all users\", users => {\n                const peers = [];\n                users.forEach(userID => {\n                    const peer = createPeer(userID, socketRef.current.id, stream);\n                    peersRef.current.push({\n                        peerID: userID,\n                        peer,\n                    })\n                    peers.push(peer);\n                })\n                setPeers(peers);\n            })\n\n            socketRef.current.on(\"user joined\", payload => {\n                const peer = addPeer(payload.signal, payload.callerID, stream);\n                peersRef.current.push({\n                    peerID: payload.callerID,\n                    peer,\n                })\n\n                setPeers(users => [...users, peer]);\n            });\n\n            socketRef.current.on(\"receiving returned signal\", payload => {\n                const item = peersRef.current.find(p => p.peerID === payload.id);\n                item.peer.signal(payload.signal);\n            });\n        })\n    }, []);\n\n    function createPeer(userToSignal, callerID, stream) {\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            stream,\n        });\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\n        })\n\n        return peer;\n    }\n\n    function addPeer(incomingSignal, callerID, stream) {\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream,\n        })\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"returning signal\", { signal, callerID })\n        })\n        peer.signal(incomingSignal);\n\n        return peer;\n    }\n\n  return (\n    <div>\n\n        <Login roomId={roomId} />\n        {peers.map((peer, index) => {\n                return (\n                    <AudioTag key={index} peer={peer} />\n                );\n        })}\n        <p>{IO.currentRoomId}</p>\n        <canvas id=\"canvas\" style={{\"width\": \"100%\", \"height\": \"100%\"}}/>\n    </div>\n  )\n\n}\n\nexport default Play","import React from \"react\";\nimport Play from './Play'\nimport Login from './Login'\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nconst App = () => {\n\n\treturn(\n    <Router>\n        <Switch>\n          <Route path=\"/:roomId?\" children={<Play />} />\n        </Switch>\n    </Router>\t\t\n\t)\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}