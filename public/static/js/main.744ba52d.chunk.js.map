{"version":3,"sources":["BillBoard.js","Input.js","Avatar.js","World.js","Player.js","IO.js","App.js","reportWebVitals.js","index.js"],"names":["Billboard","playerMesh","username","console","log","this","create","mesh","MeshBuilder","CreatePlane","width","height","World","scene","position","Vector3","Zero","y","Avatar","advancedTexture","GUI","CreateForMesh","name","containerUI","thickness","addControl","text","fontFamily","fontWeight","color","outlineColor","outlineWidth","fontSize","billboardMode","Mesh","BILLBOARDMODE_ALL","parent","Input","window","addEventListener","keydownEvent","keyupEvent","e","keyCode","preventDefault","key","up","left","right","down","CreateBox","depth","isVisible","x","z","rotation","absoluteRotation","IO","socket","emit","command","send","rotationSpeed","walkSpeed","canvas","document","getElementById","engine","Engine","Scene","gravity","collisionsEnabled","setupCamera","setupLights","setupGround","setupWalls","runRenderLoop","render","update","camera","resize","FreeCamera","attachControl","activeCameras","push","checkCollisions","applyGravity","ellipsoid","speed","keysUp","keysDown","keysRight","keysLeft","ground","material","StandardMaterial","diffuseTexture","Texture","Math","PI","wall1","sideOrientation","DOUBLESIDE","wall2","Tools","ToRadians","wall3","wall4Left","wall4Right","wall4Arch","wall4Door","diffuseColor","Color3","Black","box","actionManager","ActionManager","registerAction","InterpolateValueAction","OnPickTrigger","then","DirectionalLight","PointLight","cameraDistance","Player","id","billboard","BillBoard","all","dispose","rotationQuaternion","Quaternion","FromEulerAngles","playerID","objPlayer","Red","data","parseInt","find","transform","destroy","filter","obj","Array","io","on","init","remove","move","AudioTag","props","ref","useRef","useEffect","peer","stream","current","srcObject","autoPlay","App","useState","peers","setPeers","socketRef","peersRef","userName","setUsername","navigator","mediaDevices","getUserMedia","audio","users","forEach","userID","userToSignal","callerID","Peer","initiator","trickle","signal","createPeer","peerID","payload","incomingSignal","addPeer","p","onChange","target","value","type","map","index","onClick","login","style","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.744ba52d.chunk.js","sourcesContent":["import Avatar from './Avatar'\nimport World from './World'\nimport {MeshBuilder, Vector3, Mesh} from '@babylonjs/core';\nimport * as GUI from '@babylonjs/gui'\n\n\n\nexport default class Billboard {\n\n    constructor(playerMesh, username) {\n        console.log(username)\n\n        this.playerMesh = playerMesh;\n        this.username = username;\n        this.create();\n    }\n    \n    create() {\n        this.mesh = MeshBuilder.CreatePlane(\"billboard\", {width: Billboard.width, height: Billboard.height}, World.scene);\n        this.mesh.position = Vector3.Zero();\n        this.mesh.position.y = Avatar.height - Billboard.height;\n        var advancedTexture = GUI.AdvancedDynamicTexture.CreateForMesh(this.mesh, 1024, 256);\n        advancedTexture.name = \"AvatarBillboard\";\n        var containerUI = new GUI.Rectangle(\"container\");\n        containerUI.thickness = 0;\n        containerUI.height = \"100px\";\n        containerUI.width = \"800px\";\n        advancedTexture.addControl(containerUI);\n        this.text = new GUI.TextBlock();\n        this.text.fontFamily = \"Arial\";\n        this.text.fontWeight = \"bold\";\n        this.text.color = \"white\";\n        this.text.outlineColor = \"black\";\n        this.text.outlineWidth = 40;\n        this.text.fontSize = 100;\n        containerUI.addControl(this.text);\n        this.text.text = this.username;\n        this.mesh.billboardMode = Mesh.BILLBOARDMODE_ALL;\n        this.mesh.parent = this.playerMesh;\n    }\n}\n\nBillboard.height = 1;\nBillboard.width = 3;","export default class Input {\n    \n    static init() {\n        window.addEventListener(\"keydown\", this.keydownEvent);\n        window.addEventListener(\"keyup\", this.keyupEvent);\n        window.addEventListener(\"blur\", this.keyupEvent);\n    }\n\n    static keydownEvent(e) {\n        switch (e.keyCode) {\n            case 38: //UP\n            case 87: //W\n                 e.preventDefault()\n                Input.key.up = true;\n                break;\n            case 37: //LEFT\n            case 65: //A\n                Input.key.left = true;\n                break;\n            case 39: //RIGHT\n            case 68: //D\n                Input.key.right = true;\n                break;\n            case 40: //DOWN\n            case 83: //S\n                Input.key.down = true;\n                break;\n        }\n    }\n    \n    static keyupEvent(e) {\n        switch (e.keyCode) {\n            case 38: //UP\n            case 87: //W\n                e.preventDefault()\n                Input.key.up = false;\n                break;\n            case 37: //LEFT\n            case 65: //A\n                Input.key.left = false;\n                break;\n            case 39: //RIGHT\n            case 68: //D\n                Input.key.right = false;\n                break;\n            case 40: //DOWN\n            case 83: //S\n                Input.key.down = false;\n                break;\n        }\n    }\n}\n\nInput.key = {\n    down:false,\n    up:false,\n    left:false,\n    right:false\n};","import BillBoard from './BillBoard'\nimport IO from './IO'\nimport { Vector3, StandardMaterial, MeshBuilder, Axis, Space, Color3} from '@babylonjs/core';\nimport Input from './Input'\nimport World from './World'\n\n\n\n\nexport default class Avatar {\n    \n    static init(username) {\n        Avatar.mesh = MeshBuilder.CreateBox(\"avatar\", {height: Avatar.height, width: 1, depth: 1}, World.scene);\n        Avatar.mesh.position = Vector3.Zero();\n        Avatar.mesh.position.y = Avatar.height/2;\n        Avatar.mesh.isVisible = false\n        //Avatar.mesh.material = new StandardMaterial(\"matAvatar\", World.scene);\n        //Avatar.mesh.material.diffuseColor = new Color3.Green();\n        Avatar.username = username;\n        //new BillBoard(Avatar.mesh, Avatar.username);\n    }   \n    \n    /*static rotate(isLeft) {\n        //Turning left\n        if (isLeft) {\n            Avatar.absoluteRotation -= Avatar.rotationSpeed;\n            Avatar.mesh.rotate(Axis.Y, Avatar.rotationSpeed, Space.WORLD);\n        //Turning right\n        } else {\n            Avatar.absoluteRotation += Avatar.rotationSpeed;            \n            Avatar.mesh.rotate(Axis.Y, -Avatar.rotationSpeed, Space.WORLD);\n        }\n    }*/\n    \n    static send() {\n        var x = Avatar.mesh.position.x;\n        var y = Avatar.mesh.position.y;\n        var z = Avatar.mesh.position.z;\n        var rotation = Avatar.absoluteRotation;\n        IO.socket.emit('transform', {command: \"playerMoved\",  x, y, z, rotation})\n    }   \n    \n    static update(position) {\n        if (Avatar.mesh !== null) {\n            Avatar.mesh.position = position\n            Avatar.send();\n\n\n            //Moving forward\n            /*if (Input.key.up) {\n        \t\tconst forward = new Vector3(Avatar.walkSpeed * Math.cos(Avatar.absoluteRotation), 0, Avatar.walkSpeed * Math.sin(Avatar.absoluteRotation));\n                Avatar.mesh.moveWithCollisions(forward);\n\n                Avatar.send();\n\n            } else if(Input.key.down){\n                const backward = new Vector3(Avatar.walkSpeed * ( -1 * Math.cos(Avatar.absoluteRotation)), 0, Avatar.walkSpeed * ( -1 * Math.sin(Avatar.absoluteRotation)));\n\n                Avatar.mesh.moveWithCollisions(backward);\n                Avatar.send();\n            }\n            //Turning left\n            if (Input.key.left) {\n                Avatar.rotate(false);\n                Avatar.send();\n            //Turning right\n            } else if (Input.key.right) {\n                Avatar.rotate(true);\n                Avatar.send();\n            }*/\n        }\n    }\n}\n\nAvatar.absoluteRotation = 0;\nAvatar.height = 3;\nAvatar.mesh = null;\nAvatar.rotationSpeed = 0.01;\nAvatar.walkSpeed = 0.007;","import Avatar from './Avatar'\n//import Chat from './Chat'\nimport {SetValueAction,InterpolateValueAction, FreeCamera,ActionManager, UniversalCamera,Color3, Vector3, StandardMaterial,HemisphericLight,DirectionalLight,PointLight, Texture, MeshBuilder, Engine, Scene, Mesh, Tools} from '@babylonjs/core';\n\n\nexport default class World {\n    static init() {\n        World.canvas = document.getElementById(\"canvas\");\n        var engine = new Engine(World.canvas, true);\n\n        \n        World.scene = new Scene(engine);\n        World.scene.gravity = new Vector3(0, -0.9, 0);\n        World.scene.collisionsEnabled = true;\n\n\n\n        World.setupCamera();        \n        World.setupLights();\n        World.setupGround();\n        World.setupWalls();\n        //Chat.init()\n\n        engine.runRenderLoop(() => {\n            World.scene.render();\n            Avatar.update(World.camera.position);\n            //World.updateCamera();\n        });        \n        \n        //Resize event\n        window.addEventListener(\"resize\", () => {\n            engine.resize();\n        });\n    }\n    \n    static setupCamera() {\n        /*World.camera = new FreeCamera(\"firstPersonCam\", Vector3.Zero(), World.scene);\n        World.camera.ellipsoid = new Vector3(0.1, 0.1, 0.1);\n        World.camera.checkCollisions = true;\n        World.camera.speed = 0.1\n        World.camera.applyGravity = true;\n\n        //World.camera.position.x -= Math.sin(-Math.PI/2) * -1 * World.cameraDistance;\n        World.camera.position.y = 0.7;\n        World.camera.attachControl(World.canvas, true)\n        //World.camera.position.z -= Math.cos(-Math.PI/2) * -1 * World.cameraDistance;\n        //var lookAt = Vector3.Zero();\n        //lookAt.y = Avatar.height + Avatar.height/2;\n        //World.camera.setTarget(lookAt);*/\n        World.camera = new FreeCamera(\"FreeCamera\", new Vector3(0, -8, -20), World.scene);\n        World.camera.attachControl(World.canvas, true);\n        World.scene.activeCameras.push(World.camera);\n        World.camera.checkCollisions = true;\n        World.camera.applyGravity = true;\n        World.camera.ellipsoid = new Vector3(1.5, 1, 1.5);\n        World.camera.speed = 0.1\n        World.camera.keysUp.push(87);\n        World.camera.keysDown.push(83)\n        World.camera.keysRight.push(68)\n        World.camera.keysLeft.push(65)\n    }\n    \n    static setupGround() {\n        /*var ground = MeshBuilder.CreateGround(\"ground\", {height: 3, width: 3, subdivisions: 4}, World.scene);\n        ground.checkCollisions = true;\n        ground.position = Vector3.Zero();\n        ground.material = new StandardMaterial(\"matGround\", World.scene);\n        ground.material.diffuseTexture = new Texture(\"ground.jpg\", World.scene);*/\n        var ground = Mesh.CreatePlane(\"ground\", 20.0, World.scene);\n        console.log(ground.width)\n        ground.material = new StandardMaterial(\"groundMat\", World.scene);\n        ground.material.diffuseTexture = new Texture(\"ground.jpg\", World.scene);\n        ground.position = new Vector3(5, -10, -15);\n        ground.rotation = new Vector3(Math.PI / 2, 0, 0);\n        ground.checkCollisions = true;\n\n    }\n\n\n    static setupWalls(){\n        var wall1 = MeshBuilder.CreateBox(\"wall1\", {width: 20, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall1.checkCollisions = true;\n        wall1.material = new StandardMaterial(\"\"); \n        wall1.position = new Vector3(5, -9, -4);\n\n        var wall2 = MeshBuilder.CreateBox(\"wall2\", {width: 20, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall2.checkCollisions = true;\n        wall2.position = new Vector3(16,-9,-15);\n        wall2.material = new StandardMaterial(\"\");\n        wall2.rotation = new Vector3(0,Tools.ToRadians(90),0);\n\n        var wall3 = MeshBuilder.CreateBox(\"wall3\", {width: 20, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall3.checkCollisions = true;\n        wall3.material = new StandardMaterial(\"\"); \n        wall3.position = new Vector3(5, -9, -26);\n\n        var wall4Left = MeshBuilder.CreateBox(\"wall4Left\", {width: 8, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall4Left.checkCollisions = true;\n        wall4Left.position = new Vector3(-6, -9, -21);\n        wall4Left.material = new StandardMaterial(\"\");\n        wall4Left.rotation = new Vector3(0,Tools.ToRadians(90),0);\n\n        var wall4Right = MeshBuilder.CreateBox(\"wall4Right\", {width: 8, height: 10, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall4Right.checkCollisions = true;\n        wall4Right.position = new Vector3(-6, -9, -9);\n        wall4Right.material = new StandardMaterial(\"\");\n        wall4Right.rotation = new Vector3(0,Tools.ToRadians(90),0);\n\n        var wall4Arch = MeshBuilder.CreateBox(\"wall4Arch\", {width: 4, height: 2, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall4Arch.checkCollisions = true;\n        wall4Arch.position = new Vector3(-6, -5, -15);\n        wall4Arch.material = new StandardMaterial(\"\");\n        wall4Arch.rotation = new Vector3(0,Tools.ToRadians(90),0);\n\n        var wall4Door = MeshBuilder.CreateBox(\"wall4Door\", {width: 4, height: 8, depth: 2, sideOrientation: Mesh.DOUBLESIDE}, World.scene);\n        wall4Door.checkCollisions = true;\n        wall4Door.position = new Vector3(-6, -10, -15);\n        wall4Door.material = new StandardMaterial(\"\");\n        wall4Door.rotation = new Vector3(0,Tools.ToRadians(90),0);\n        wall4Door.material.diffuseColor = new Color3.Black();\n\n        var box = Mesh.CreateBox(\"crate\", 2, World.scene);\n        box.material = new StandardMaterial(\"Mat\", World.scene);\n        box.position = new Vector3(5, -9, -10);\n        box.checkCollisions = true;\n        box.actionManager = new ActionManager(World.scene);\n        box.actionManager.registerAction(\n            new InterpolateValueAction(\n                ActionManager.OnPickTrigger,\n                wall4Door,\n                'visibility',\n                0\n            )).then(\n            new InterpolateValueAction(\n                ActionManager.OnPickTrigger,\n                wall4Door,\n                'visibility',\n                1.0\n            )\n       )\n\n    }\n    \n    static setupLights() {\n        //var light = new HemisphericLight(\"light1\", new Vector3(1, 1, 0.5), World.scene);\n        //light.intensity = 0.5;\n        var light0 = new DirectionalLight(\"Omni\", new Vector3(-2, -5, 2), World.scene);\n        var light1 = new PointLight(\"Omni\", new Vector3(2, -5, -2), World.scene);        \n    }\n    \n    /*static updateCamera() {\n        if (typeof Avatar.mesh !== \"undefined\" && typeof World.camera !== \"undefined\" && Avatar.mesh !== null) {\n            World.camera.position.x = Avatar.mesh.position.x;\n            World.camera.position.y = Avatar.mesh.position.y + Avatar.height;\n            World.camera.position.z = Avatar.mesh.position.z;\n            World.camera.position.z -= Math.sin(Avatar.absoluteRotation - Math.PI) * -1 * World.cameraDistance;\n            World.camera.position.x -= Math.cos(Avatar.absoluteRotation - Math.PI) * -1 * World.cameraDistance;\n            var lookAt = new Vector3(Avatar.mesh.position.x, Avatar.mesh.position.y + Avatar.height, Avatar.mesh.position.z);\n            World.camera.setTarget(lookAt);\n        }\n    }*/\n}\n\nWorld.cameraDistance = 1.5;","import World from './World'\nimport {MeshBuilder, Vector3, StandardMaterial, Color3, Quaternion} from '@babylonjs/core';\nimport BillBoard from './BillBoard'\n\n\nexport default class Player {\n    \n    constructor(id, username) {\n        var height = 3;\n        this.id = id;\n        this.mesh = MeshBuilder.CreateBox(\"avatar\", {height: height, width: 1, depth: 1}, World.scene);\n        this.mesh.position = Vector3.Zero();\n        this.mesh.position.x = 0;\n        this.mesh.position.y = height/2;\n        this.mesh.position.z = 0;\n        this.mesh.material = Player.material;\n        this.billboard = new BillBoard(this.mesh, username);\n        Player.all.push(this);\n    }\n    \n    //Destroy player meshes\n    destroy() {\n        this.billboard.mesh.dispose();\n        this.mesh.dispose();\n    }\n    \n    //Find existing player or create if not exists\n    static find(playerID, username) {       \n        //Check if player is in our list\n        for (var objPlayer of Player.all) {\n            if (objPlayer.id === playerID) {\n                //Found player, so lets return it\n                return(objPlayer);\n            }\n        };                \n        //Player doesn't exist, so lets create a new one\n        console.log(playerID, username)\n        return(new Player(playerID, username));\n    }\n    \n    static init() {\n        Player.material = new StandardMaterial(\"matPlayer\", World.scene);\n        Player.material.diffuseColor = new Color3.Red();        \n    }\n    \n    //Find player and move them\n    static move(data) {\n   \n        var playerID = parseInt(data.id);\n        var objPlayer = Player.find(playerID, data.username);\n        objPlayer.transform(data.x, data.y, data.z, data.rotation);\n    }\n    \n    //Remove player from world\n    static remove(data) {\n        for (var objPlayer of Player.all) {\n            if (objPlayer.id === data.id) {\n                objPlayer.destroy();\n                break;\n            }\n        }\n        \n        //Remove me from list of all players\n        Player.all = Player.all.filter((obj) => {\n            return obj.id !== data.id;\n        });\n    }\n    \n    //Change position and rotation\n    transform(x, y, z, rotation) {\n        this.mesh.position.x = x;\n        this.mesh.position.y = y;\n        this.mesh.position.z = z;\n        this.mesh.rotationQuaternion = Quaternion.FromEulerAngles(0, -rotation, 0);\n    }\n}\n\nPlayer.all = new Array();","import World from './World'\nimport Avatar from './Avatar'\nimport Player from './Player'\nimport Input from './Input'\nimport io from \"socket.io-client\"\n\nexport default class IO {\n    \n    static init() {\n\n            //IO.socket = io(\"http://localhost:3001/\", {reconnectionDelayMax: 10000})\n\n            IO.socket=io()\n\n            IO.socket.on(\"auth\", function(data){\n                   World.init()\n                   Player.init()\n                   Avatar.init(data.username);\n                   Input.init();     \n                    //Avatar.send();\n            })\n\n            IO.socket.on(\"transform\", function(data){\n                console.log(data)\n                switch(data.command) {\n                case \"playerGone\":\n                    Player.remove(data);\n                    break;\n                case \"playerMoved\":\n                    Player.move(data);\n                    break;\n                }\n            })\n\n            /*IO.socket.on(\"all users\", users => {\n                const peers = [];\n                users.forEach(userID => {\n                    const peer = createPeer(userID, socketRef.current.id, stream);\n                    peersRef.current.push({\n                        peerID: userID,\n                        peer,\n                    })\n                    peers.push(peer);\n                })\n                setPeers(peers);\n            })*/\n\n\n\n        }\n\n     static login (username) {\n           IO.socket.emit('login', {username: username})\n     }\n\n}\n\n        /*Socket.ws.onmessage = (msg) => {\n            switch(msg.data) {\n                case \"playerGone\":\n                    Player.remove(json.data);\n                    break;\n                case \"playerMoved\":\n                    Player.move(json.data);\n                    break;\n            }\n        };*/\n\n        /*Socket.ws.onclose = () => {\n            alert(\"Connection closed\");\n        };\n        Socket.ws.onerror = (e) => {\n            console.log(\"Error\");\n        };\n    }*/\n\n\n","import React, { useEffect, useRef, useState } from \"react\";\nimport IO from './IO'\nimport './App.css';\nimport Peer from \"simple-peer\";\n\n\nIO.init()\n\n\nconst AudioTag = (props) => {\n    const ref = useRef();\n\n    useEffect(() => {\n        props.peer.on(\"stream\", stream => {\n            ref.current.srcObject = stream;\n        })\n    }, []);\n\n    return (\n        <audio autoPlay ref={ref} />\n    );\n}\n\n\nconst App = () => {\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userAudio = useRef();\n  const peersRef = useRef([]);\n  const [userName, setUsername] = useState('')\n  //const roomID = \"1\";\n\n   useEffect(() => {\n        socketRef.current = IO.socket\n        navigator.mediaDevices.getUserMedia({audio: true }).then(stream => {\n            //userAudio.current.srcObject = stream;\n            //socketRef.current.emit(\"join room\", roomID);\n            socketRef.current.on(\"all users\", users => {\n                const peers = [];\n                users.forEach(userID => {\n                    const peer = createPeer(userID, socketRef.current.id, stream);\n                    peersRef.current.push({\n                        peerID: userID,\n                        peer,\n                    })\n                    peers.push(peer);\n                })\n                setPeers(peers);\n            })\n\n            socketRef.current.on(\"user joined\", payload => {\n                const peer = addPeer(payload.signal, payload.callerID, stream);\n                peersRef.current.push({\n                    peerID: payload.callerID,\n                    peer,\n                })\n\n                setPeers(users => [...users, peer]);\n            });\n\n            socketRef.current.on(\"receiving returned signal\", payload => {\n                const item = peersRef.current.find(p => p.peerID === payload.id);\n                item.peer.signal(payload.signal);\n            });\n        })\n    }, []);\n\n    function createPeer(userToSignal, callerID, stream) {\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            stream,\n        });\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\n        })\n\n        return peer;\n    }\n\n    function addPeer(incomingSignal, callerID, stream) {\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream,\n        })\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"returning signal\", { signal, callerID })\n        })\n        peer.signal(incomingSignal);\n\n        return peer;\n    }\n\n  return (\n    <div>\n        <h1>Multiplayer Game</h1>\n        <span>Username: </span><input onChange={e => setUsername(e.target.value)} type=\"text\" id=\"username\"/>\n        {peers.map((peer, index) => {\n                return (\n                    <AudioTag key={index} peer={peer} />\n                );\n        })}\n        <button id=\"login\" onClick={() => IO.login(userName)}>Log-in</button>\n        <canvas id=\"canvas\" style={{\"width\": \"100%\", \"height\": \"100%\"}}/>\n    </div>\n  )\n\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}